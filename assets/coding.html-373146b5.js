const n=JSON.parse(`{"key":"v-6418ff82","path":"/posts/coding/coding.html","title":"编程题","lang":"zh-CN","frontmatter":{"icon":"code","order":1,"date":"2021-03-20T00:00:00.000Z","author":"h7ml","category":"es6","tag":"es6","title":"编程题","star":true,"description":"new 运算符 new 运算符原理 创建一个全新的对象 为新创建的对象添加 __proto__ 属模拟实现 new 运算符性并指向构造函数的原型对象 将新创建的对象作为函数调用的 this 如果构造函数没有返回对象类型，则返回新创建的对象 模拟实现 new 运算符 function myNew() { // 获取构造函数 const Constructor = [].shift.call(arguments); // 创建空对象并设置原型 const obj = Object.create(Constructor.prototype); // 绑定 this 并执行构造函数 const result = Constructor.apply(obj, arguments); // 返回构造函数显示返回的值或新对象 const type = typeof result; return result &amp;&amp; (type === 'object' || type === 'function') ? result : obj; }","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/coding/coding.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/coding/coding.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"编程题"}],["meta",{"property":"og:description","content":"new 运算符 new 运算符原理 创建一个全新的对象 为新创建的对象添加 __proto__ 属模拟实现 new 运算符性并指向构造函数的原型对象 将新创建的对象作为函数调用的 this 如果构造函数没有返回对象类型，则返回新创建的对象 模拟实现 new 运算符 function myNew() { // 获取构造函数 const Constructor = [].shift.call(arguments); // 创建空对象并设置原型 const obj = Object.create(Constructor.prototype); // 绑定 this 并执行构造函数 const result = Constructor.apply(obj, arguments); // 返回构造函数显示返回的值或新对象 const type = typeof result; return result &amp;&amp; (type === 'object' || type === 'function') ? result : obj; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"es6"}],["meta",{"property":"article:published_time","content":"2021-03-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"编程题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-03-20T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":3,"title":"new 运算符","slug":"new-运算符","link":"#new-运算符","children":[]},{"level":3,"title":"instanceof 运算符","slug":"instanceof-运算符","link":"#instanceof-运算符","children":[]},{"level":3,"title":"Object.create()","slug":"object-create","link":"#object-create","children":[]},{"level":3,"title":"Function.prototype.call()","slug":"function-prototype-call","link":"#function-prototype-call","children":[]},{"level":3,"title":"Function.prototype.apply()","slug":"function-prototype-apply","link":"#function-prototype-apply","children":[]},{"level":3,"title":"Function.prototype.bind()","slug":"function-prototype-bind","link":"#function-prototype-bind","children":[]},{"level":2,"title":"工具方法系列","slug":"工具方法系列","link":"#工具方法系列","children":[{"level":3,"title":"debounce 函数防抖","slug":"debounce-函数防抖","link":"#debounce-函数防抖","children":[]},{"level":3,"title":"throttle 函数节流","slug":"throttle-函数节流","link":"#throttle-函数节流","children":[]}]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":5.56,"words":1669},"filePathRelative":"posts/coding/coding.md","localizedDate":"2021年3月20日","excerpt":"<h3> new 运算符</h3>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">new 运算符原理</p>\\n<ol>\\n<li>创建一个全新的对象</li>\\n<li>为新创建的对象添加 <strong><code>__proto__</code></strong> 属模拟实现 new 运算符性并指向构造函数的原型对象</li>\\n<li>将新创建的对象作为函数调用的 this</li>\\n<li>如果构造函数没有返回对象类型，则返回新创建的对象</li>\\n</ol>\\n</div>\\n<details class=\\"hint-container details\\"><summary>模拟实现 new 运算符</summary>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">myNew</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 获取构造函数</span>\\n  <span class=\\"token keyword\\">const</span> Constructor <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">shift</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">call</span><span class=\\"token punctuation\\">(</span>arguments<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token comment\\">// 创建空对象并设置原型</span>\\n  <span class=\\"token keyword\\">const</span> obj <span class=\\"token operator\\">=</span> Object<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Constructor</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token comment\\">// 绑定 this 并执行构造函数</span>\\n  <span class=\\"token keyword\\">const</span> result <span class=\\"token operator\\">=</span> <span class=\\"token function\\">Constructor</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">apply</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">,</span> arguments<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token comment\\">// 返回构造函数显示返回的值或新对象</span>\\n  <span class=\\"token keyword\\">const</span> type <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">typeof</span> result<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> result <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token punctuation\\">(</span>type <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'object'</span> <span class=\\"token operator\\">||</span> type <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'function'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">?</span> result <span class=\\"token operator\\">:</span> obj<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></details>","autoDesc":true}`);export{n as data};
