const n=JSON.parse(`{"key":"v-67cce098","path":"/posts/html/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF.html","title":"JavaScript 面向对象-原型继承","lang":"zh-CN","frontmatter":{"description":"JavaScript 面向对象-原型继承 JavaScript原型 JavaScript原型链 原型链继承 function Person(name) { this.name = name; } Person.prototype.fn = function () { console.log('parent'); }; function Child() {} Child.prototype = new Person('name'); // new 之后 只是实例化的对象，下面有 __proto__ Child.prototype.constructor = Child; // 手动修改回来 var child = new Child(); // 在原型上继承，子类不能修改和传参进去","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/html/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/html/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"JavaScript 面向对象-原型继承"}],["meta",{"property":"og:description","content":"JavaScript 面向对象-原型继承 JavaScript原型 JavaScript原型链 原型链继承 function Person(name) { this.name = name; } Person.prototype.fn = function () { console.log('parent'); }; function Child() {} Child.prototype = new Person('name'); // new 之后 只是实例化的对象，下面有 __proto__ Child.prototype.constructor = Child; // 手动修改回来 var child = new Child(); // 在原型上继承，子类不能修改和传参进去"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.h7ml.cn/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"JavaScript 面向对象-原型继承"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript 面向对象-原型继承\\",\\"image\\":[\\"https://www.h7ml.cn/\\"],\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\",\\"url\\":\\"https://www.h7ml.cn\\"}]}"]]},"headers":[{"level":2,"title":"原型链继承","slug":"原型链继承","link":"#原型链继承","children":[]},{"level":2,"title":"对象冒充继承（借用构造函数","slug":"对象冒充继承-借用构造函数","link":"#对象冒充继承-借用构造函数","children":[]},{"level":2,"title":"组合继承","slug":"组合继承","link":"#组合继承","children":[]},{"level":2,"title":"寄生式组合继承","slug":"寄生式组合继承","link":"#寄生式组合继承","children":[]},{"level":2,"title":"for...in 继承","slug":"for-in-继承","link":"#for-in-继承","children":[]},{"level":2,"title":"Object.create()继承","slug":"object-create-继承","link":"#object-create-继承","children":[]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":0.8,"words":240},"filePathRelative":"posts/html/面向对象/原型继承.md","localizedDate":"2023年5月3日","excerpt":"<h1> JavaScript 面向对象-原型继承</h1>\\n<figure><figcaption>JavaScript原型</figcaption></figure>\\n<figure><figcaption>JavaScript原型链</figcaption></figure>\\n<h2> 原型链继承</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">Person</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">name</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> name<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token class-name\\">Person</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">fn</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'parent'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">Child</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token class-name\\">Child</span><span class=\\"token punctuation\\">.</span>prototype <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Person</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'name'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// new 之后 只是实例化的对象，下面有 __proto__</span>\\n<span class=\\"token class-name\\">Child</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span>constructor <span class=\\"token operator\\">=</span> Child<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 手动修改回来</span>\\n<span class=\\"token keyword\\">var</span> child <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Child</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// 在原型上继承，子类不能修改和传参进去</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
