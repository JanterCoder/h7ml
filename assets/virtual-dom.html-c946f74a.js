const e=JSON.parse('{"key":"v-36a55137","path":"/posts/vue/virtual-dom.html","title":"Virtual DOM","lang":"zh-CN","frontmatter":{"icon":"vue","order":3,"date":"2021-07-12T00:00:00.000Z","author":"h7ml","title":"Virtual DOM","category":"vue","tag":["vue","Virtual DOM"],"star":true,"lastUpdated":false,"description":"Virtual DOM 要知道渲染真实DOM的开销是很大的，比如有时候我们修改了某个数据，如果直接渲染到真实 dom 上会引起整个 dom 树的重绘和重排，有没有可能我们只更新我们修改的那一小块 dom 而不要更新整个 dom 呢？ diff算法能够帮助我们。 我们先根据真实 DOM 生成一颗virtual DOM，当virtual DOM某个节点的数据改变后会生成一个新的Vnode，然后Vnode和oldVnode作对比，发现有不一样的地方就直接修改在真实的 DOM 上，然后使oldVnode的值为Vnode。","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/vue/virtual-dom.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/vue/virtual-dom.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"Virtual DOM"}],["meta",{"property":"og:description","content":"Virtual DOM 要知道渲染真实DOM的开销是很大的，比如有时候我们修改了某个数据，如果直接渲染到真实 dom 上会引起整个 dom 树的重绘和重排，有没有可能我们只更新我们修改的那一小块 dom 而不要更新整个 dom 呢？ diff算法能够帮助我们。 我们先根据真实 DOM 生成一颗virtual DOM，当virtual DOM某个节点的数据改变后会生成一个新的Vnode，然后Vnode和oldVnode作对比，发现有不一样的地方就直接修改在真实的 DOM 上，然后使oldVnode的值为Vnode。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"vue"}],["meta",{"property":"article:tag","content":"Virtual DOM"}],["meta",{"property":"article:published_time","content":"2021-07-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Virtual DOM\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-07-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"Virtual DOM","slug":"virtual-dom","link":"#virtual-dom","children":[{"level":3,"title":"virtual DOM 和真实 DOM 的区别","slug":"virtual-dom-和真实-dom-的区别","link":"#virtual-dom-和真实-dom-的区别","children":[]},{"level":3,"title":"VNode","slug":"vnode","link":"#vnode","children":[]}]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":2.79,"words":836},"filePathRelative":"posts/vue/virtual-dom.md","localizedDate":"2021年7月12日","excerpt":"<h2> Virtual DOM</h2>\\n<p>要知道渲染<code>真实DOM</code>的开销是很大的，比如有时候我们修改了某个数据，<strong>如果直接渲染到真实 dom 上会引起整个 dom 树的重绘和重排</strong>，有没有可能我们只更新我们修改的那一小块 dom 而不要更新整个 dom 呢？</p>\\n<p><code>diff算法</code>能够帮助我们。</p>\\n<p>我们先根据真实 DOM 生成一颗<code>virtual DOM</code>，当<code>virtual DOM</code>某个节点的数据改变后会生成一个新的<code>Vnode</code>，然后<code>Vnode</code>和<code>oldVnode</code>作对比，发现有不一样的地方就直接修改在真实的 DOM 上，然后使<code>oldVnode</code>的值为<code>Vnode</code>。</p>","autoDesc":true}');export{e as data};
