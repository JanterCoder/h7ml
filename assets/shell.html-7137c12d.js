import{_ as i,r as c,o as e,c as t,a as s,b as n,d as o,f as a}from"./app-2a9bb723.js";const p={},d=a(`<h2 id="shell" tabindex="-1"><a class="header-anchor" href="#shell" aria-hidden="true">#</a> Shell</h2><h2 id="shell-概述" tabindex="-1"><a class="header-anchor" href="#shell-概述" aria-hidden="true">#</a> Shell 概述</h2><figure><img src="https://static.h7ml.cn/vitepress/assets/images/linux/image-20221026104446000.png" alt="image-20221026104446000" tabindex="0" loading="lazy"><figcaption>image-20221026104446000</figcaption></figure><ul><li>Linux 提供的 Shell 解析器有</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token operator">/</span>bin<span class="token operator">/</span>sh
<span class="token operator">/</span>bin<span class="token operator">/</span>bash
<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>sh
<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>bash
<span class="token operator">/</span>bin<span class="token operator">/</span>tcsh
<span class="token operator">/</span>bin<span class="token operator">/</span>csh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>bash 和 sh 的关系</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code>┌─<span class="token punctuation">[</span>root@<span class="token number">193_168_88_100</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token operator">/</span>bin<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">[</span>二 <span class="token number">10</span>月 <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">01</span><span class="token punctuation">]</span>
└─<span class="token punctuation">[</span>$<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span> ll <span class="token operator">|</span> grep bash
 bash
 bashbug <span class="token operator">-&gt;</span> bashbug<span class="token operator">-</span><span class="token number">64</span>
 bashbug<span class="token operator">-</span><span class="token number">64</span>
 sh <span class="token operator">-&gt;</span> bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Centos 默认的解析器是 bash</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code>┌─<span class="token punctuation">[</span>root@<span class="token number">193_168_88_100</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token operator">/</span>bin<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">[</span>二 <span class="token number">10</span>月 <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">01</span><span class="token punctuation">]</span>
└─<span class="token punctuation">[</span>$<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span> echo <span class="token variable">$SHELL</span>
<span class="token operator">/</span>bin<span class="token operator">/</span>zsh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="shell-入门" tabindex="-1"><a class="header-anchor" href="#shell-入门" aria-hidden="true">#</a> Shell 入门</h2><p>脚本格式</p><h3 id="第一个-shell" tabindex="-1"><a class="header-anchor" href="#第一个-shell" aria-hidden="true">#</a> 第一个 Shell</h3><p><strong>脚本：helloworld.s</strong></p><p>创建一个 Shell 脚本，输出 helloworld</p><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code>touch helloworld<span class="token punctuation">.</span>sh
vim helloworld<span class="token punctuation">.</span>sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,15),r={href:"http://helloworld.sh",target:"_blank",rel:"noopener noreferrer"},u=a(`<div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token comment">#!/bin/bash</span>
echo <span class="token string-literal"><span class="token string">&quot;helloworld&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>脚本的常用执行方式</strong></p><h4 id="第一种" tabindex="-1"><a class="header-anchor" href="#第一种" aria-hidden="true">#</a> 第一种</h4><p>采用 bash 或 sh+脚本的相对路径或绝对路径（不用赋予脚本+x 权限） sh+脚本的相对路径</p><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code>sh <span class="token punctuation">.</span><span class="token operator">/</span>helloworld<span class="token punctuation">.</span>sh
Helloworld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>sh+脚本的绝对路径</p><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code>sh <span class="token operator">/</span>home<span class="token operator">/</span>atguigu<span class="token operator">/</span>shells<span class="token operator">/</span>helloworld<span class="token punctuation">.</span>sh
helloworld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>bash+脚本的相对路径</p><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code>bash <span class="token punctuation">.</span><span class="token operator">/</span>helloworld<span class="token punctuation">.</span>sh
Helloworld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>bash+脚本的绝对路径</p><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code>bash <span class="token operator">/</span>home<span class="token operator">/</span>atguigu<span class="token operator">/</span>shells<span class="token operator">/</span>helloworld<span class="token punctuation">.</span>sh
Helloworld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="第二种" tabindex="-1"><a class="header-anchor" href="#第二种" aria-hidden="true">#</a> 第二种</h4><p>采用输入脚本的绝对路径或相对路径执行脚本**（必须具有可执行权限+x)**</p><p>首先要赋予 <code>helloworld.sh</code> 脚本的+x 权限</p><p><strong>执行脚本</strong></p><p>相对路径</p><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token punctuation">.</span><span class="token operator">/</span>helloworld<span class="token punctuation">.</span>sh
Helloworld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>绝对路径</p><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token operator">/</span>home<span class="token operator">/</span>atguigu<span class="token operator">/</span>shells<span class="token operator">/</span>helloworld<span class="token punctuation">.</span>sh
Helloworld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>WARNING</p><p>注意：第一种执行方法，本质是 bash 解析器帮你执行脚本，所以脚本本身不需要执行 权限。第二种执行方法，本质是脚本需要自己执行，所以需要执行权限。</p><h4 id="第三种" tabindex="-1"><a class="header-anchor" href="#第三种" aria-hidden="true">#</a> 第三种</h4><p>在脚本的路径前加上“.”或者 sourc</p><p>有以下脚本</p><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ cat test<span class="token punctuation">.</span>sh
<span class="token comment">#!/bin/bash</span>
<span class="token constant">A</span><span class="token operator">=</span><span class="token number">5</span>
echo <span class="token variable">$A</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分别使用 sh，bash，./ 和 . 的方式来执行，结果如下：</p><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ bash test<span class="token punctuation">.</span>sh
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ echo <span class="token variable">$A</span>
<span class="token number">5</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ sh test<span class="token punctuation">.</span>sh
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ echo <span class="token variable">$A</span>
<span class="token number">5</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>test<span class="token punctuation">.</span>sh
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ echo <span class="token variable">$A</span>
<span class="token number">5</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token punctuation">.</span> test<span class="token punctuation">.</span>sh
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ echo <span class="token variable">$A</span>
<span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>原因：</strong></p><ul><li>前两种方式都是在当前 <code>shell</code> 中打开一个子 <code>shell</code> 来执行脚本内容，当脚本内容结束，则子 <code>shell</code> 关闭，回到父 <code>shell</code> 中。</li><li>第三种，也就是使用在脚本路径前加“.”或者 <code>source</code> 的方式，**可以使脚本内容在当前<code>shell</code> 里执行，而无需打开子 <code>shell！</code>**这也是为什么我们每次要修改完<code>/etc/profile</code> 文件以后，需要 <code>source</code> 一下的原因。</li><li>开子 <code>shell</code> 与不开子 <code>shell</code> 的区别就在于，环境变量的继承关系，如在子 <code>shell</code> 中设置的当前变量，父 <code>shell</code> 是不可见的</li></ul><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><h2 id="系统预定义变量" tabindex="-1"><a class="header-anchor" href="#系统预定义变量" aria-hidden="true">#</a> 系统预定义变量</h2>`,31),v={class:"MathJax",jax:"SVG",style:{position:"relative"}},b={style:{"vertical-align":"-0.452ex"},xmlns:"http://www.w3.org/2000/svg",width:"10.104ex",height:"2.149ex",role:"img",focusable:"false",viewBox:"0 -750 4466 950","aria-hidden":"true"},m=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(888,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(1651,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(2702,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3466,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">、</text></g></g></g></g>',1),k=[m],h=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"H"),s("mi",null,"O"),s("mi",null,"M"),s("mi",null,"E"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mo",null,"、")])])],-1),g={class:"MathJax",jax:"SVG",style:{position:"relative"}},Q={style:{"vertical-align":"-0.452ex"},xmlns:"http://www.w3.org/2000/svg",width:"10.541ex",height:"2.149ex",role:"img",focusable:"false",viewBox:"0 -750 4659 950","aria-hidden":"true"},f=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(1533,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(2297,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(2978,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3659,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">、</text></g></g></g></g>',1),T=[f],$=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"S"),s("mi",null,"H"),s("mi",null,"E"),s("mi",null,"L"),s("mi",null,"L"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mo",null,"、")])])],-1),w=a(`<ul><li>查看系统变量的值</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ echo <span class="token variable">$HOME</span>
<span class="token operator">/</span>home<span class="token operator">/</span>atguigu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>显示当前 Shell 中所有变量：set</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ set
<span class="token constant">BASH</span><span class="token operator">=</span><span class="token operator">/</span>bin<span class="token operator">/</span>bash
<span class="token constant">BASH_ALIASES</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token constant">BASH_ARGC</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token constant">BASH_ARGV</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义变量" tabindex="-1"><a class="header-anchor" href="#自定义变量" aria-hidden="true">#</a> 自定义变量</h2><p><strong>基本语法</strong></p><ul><li>定义变量：变量名=变量值，<strong>注意，=号前后不能有空格</strong></li><li>撤销变量：unset 变量名</li><li>声明静态变量：readonly 变量，<strong>注意：不能 unset</strong></li></ul><p><strong>变量定义规则</strong></p><ul><li>变量名称可以由字母、数字和下划线组成，但是不能以数字开头，<strong>环境变量名建议大写</strong>。</li><li>等号两侧不能有空格</li><li>在 bash 中，<strong>变量默认类型都是字符串类型，无法直接进行数值运算</strong>。</li><li>变量的值<strong>如果有空格，需要使用双引号或单引号括起来</strong></li></ul><p><strong>案例实操</strong></p><ul><li>定义变量 A</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token constant">A</span><span class="token operator">=</span><span class="token number">5</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ echo <span class="token variable">$A</span>
<span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>给变量 A 重新赋值</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token constant">A</span><span class="token operator">=</span><span class="token number">8</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ echo <span class="token variable">$A</span>
<span class="token number">8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>撤销变量 A</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ unset <span class="token constant">A</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ echo <span class="token variable">$A</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>声明静态的变量 B=2，不能 unset</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ readonly <span class="token constant">B</span><span class="token operator">=</span><span class="token number">2</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ echo <span class="token variable">$B</span>
<span class="token number">2</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token constant">B</span><span class="token operator">=</span><span class="token number">9</span>
<span class="token operator">-</span>bash<span class="token operator">:</span> <span class="token constant">B</span><span class="token operator">:</span> readonly variable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 bash 中，变量默认类型都是字符串类型，无法直接进行数值运算</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop102</span> <span class="token operator">~</span><span class="token punctuation">]</span>$ <span class="token constant">C</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop102</span> <span class="token operator">~</span><span class="token punctuation">]</span>$ echo <span class="token variable">$C</span>
<span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>变量的值如果有空格，需要使用双引号或单引号括起来</li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop102</span> <span class="token operator">~</span><span class="token punctuation">]</span>$ <span class="token constant">D</span><span class="token operator">=</span><span class="token constant">I</span> love banzhang
<span class="token operator">-</span>bash<span class="token operator">:</span> world<span class="token operator">:</span> command not found
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop102</span> <span class="token operator">~</span><span class="token punctuation">]</span>$ <span class="token constant">D</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">&quot;I love banzhang&quot;</span></span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop102</span> <span class="token operator">~</span><span class="token punctuation">]</span>$ echo <span class="token variable">$D</span>
<span class="token constant">I</span> love banzhang
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可把变量提升为全局环境变量，可供其他 Shell 程序使用，<strong>export 变量名</strong></li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ vim helloworld<span class="token punctuation">.</span>sh

<span class="token comment"># 在 helloworld.sh 文件中增加 echo $B</span>

<span class="token comment">#!/bin/bash</span>
echo <span class="token string-literal"><span class="token string">&quot;helloworld&quot;</span></span>
echo <span class="token variable">$B</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>helloworld<span class="token punctuation">.</span>sh
Helloworld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>发现并没有打印输出变量 B 的值。</p><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ export <span class="token constant">B</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>helloworld<span class="token punctuation">.</span>sh
helloworld
<span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TIP</p><p>在子 <code>Shell</code> 中声明或者改变全局的变量<strong>都不会影响父 <code>Shell</code> 中的变量</strong></p><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><p>字符串是 shell 编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。</p><h3 id="单引号" tabindex="-1"><a class="header-anchor" href="#单引号" aria-hidden="true">#</a> 单引号</h3><p>单引号字符串的限制：</p><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li><li>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</li></ul><h3 id="双引号" tabindex="-1"><a class="header-anchor" href="#双引号" aria-hidden="true">#</a> 双引号</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">your_name</span><span class="token operator">=</span><span class="token string">&quot;runoob&quot;</span>
<span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">&quot;Hello, I know you are <span class="token entity" title="\\&quot;">\\&quot;</span><span class="token variable">$your_name</span><span class="token entity" title="\\&quot;">\\&quot;</span>! <span class="token entity" title="\\n">\\n</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token variable">$str</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>双引号的优点：</p><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><p><code>bash</code>支持一维数组**（不支持多维数组）<strong>，并且</strong>没有限定数组的大小**。</p><p>类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。</p><h3 id="定义数组" tabindex="-1"><a class="header-anchor" href="#定义数组" aria-hidden="true">#</a> 定义数组</h3><p>在 Shell 中，用括号来表示数组，数组元素用&quot;空格&quot;符号分割开。定义数组的一般形式为：</p><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">array_name</span><span class="token operator">=</span><span class="token punctuation">(</span>value0 value1 value2 value3<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">array_name</span><span class="token operator">=</span><span class="token punctuation">(</span>
value0
value1
value2
value3
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以单独定义数组的各个分量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>array_name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>value0
array_name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>value1
array_name<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span>valuen
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以不使用连续的下标，而且下标的范围没有限制。</p><h3 id="读取数组" tabindex="-1"><a class="header-anchor" href="#读取数组" aria-hidden="true">#</a> 读取数组</h3><p>读取数组元素值的一般格式是：</p><p>例如：</p><p>使用 <strong>@</strong> 符号可以获取数组中的所有元素，例如：</p><h3 id="获取数组的长度" tabindex="-1"><a class="header-anchor" href="#获取数组的长度" aria-hidden="true">#</a> 获取数组的长度</h3><p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token operator">*</span><span class="token comment"># 取得数组元素的个数*</span>
length<span class="token operator">=</span>$<span class="token punctuation">{</span><span class="token comment">#array_name[@]}</span>
<span class="token operator">*</span><span class="token comment"># 或者*</span>
length<span class="token operator">=</span>$<span class="token punctuation">{</span><span class="token comment">#array_name[*]}</span>
<span class="token operator">*</span><span class="token comment"># 取得数组单个元素的长度*</span>
lengthn<span class="token operator">=</span>$<span class="token punctuation">{</span><span class="token comment">#array_name[n]}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="特殊变量" tabindex="-1"><a class="header-anchor" href="#特殊变量" aria-hidden="true">#</a> 特殊变量</h2><h3 id="n" tabindex="-1"><a class="header-anchor" href="#n" aria-hidden="true">#</a> $n</h3><p>功能描述：n 为数字，$0 代表该脚本名称，<code>$1-$9</code> 代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如<code>\${10}</code></p><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ touch parameter<span class="token punctuation">.</span>sh
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ vim parameter<span class="token punctuation">.</span>sh
<span class="token comment">#!/bin/bash</span>
echo <span class="token string-literal"><span class="token string">&#39;==========$n==========&#39;</span></span>
echo $<span class="token number">0</span>
echo $<span class="token number">1</span>
echo $<span class="token number">2</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ chmod <span class="token number">777</span> parameter<span class="token punctuation">.</span>sh
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>parameter<span class="token punctuation">.</span>sh cls xz
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span><span class="token variable">$n</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>
<span class="token punctuation">.</span><span class="token operator">/</span>parameter<span class="token punctuation">.</span>sh
cls
xz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> $</h3><p>功能描述：获取所有输<strong>入参数个数</strong>，常用于循环，判断参数的个数是否正确以及加强脚本的健壮性</p><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ vim parameter<span class="token punctuation">.</span>sh
<span class="token comment">#!/bin/bash</span>
echo <span class="token string-literal"><span class="token string">&#39;==========$n==========&#39;</span></span>
echo $<span class="token number">0</span>
echo $<span class="token number">1</span>
echo $<span class="token number">2</span>
echo <span class="token string-literal"><span class="token string">&#39;==========$#==========&#39;</span></span>
echo $<span class="token comment">#</span>
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ chmod <span class="token number">777</span> parameter<span class="token punctuation">.</span>sh
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>parameter<span class="token punctuation">.</span>sh cls xz
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span><span class="token variable">$n</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>
<span class="token punctuation">.</span><span class="token operator">/</span>parameter<span class="token punctuation">.</span>sh
cls
xz
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>$<span class="token comment">#==========</span>
<span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,64),x={id:"-1",tabindex:"-1"},y=s("a",{class:"header-anchor",href:"#-1","aria-hidden":"true"},"#",-1),q={class:"MathJax",jax:"SVG",style:{position:"relative"}},_={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.525ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2000 1000","aria-hidden":"true"},H=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext" fill="red" stroke="red"><path data-c="5C" d="M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z"></path><path data-c="2A" d="M215 721Q216 732 225 741T248 750Q263 750 273 742T284 721L270 571L327 613Q383 654 388 657T399 660Q412 660 423 650T435 624T424 600T376 575Q363 569 355 566L289 534L355 504L424 470Q435 462 435 447Q435 431 424 420T399 409Q393 409 388 412T327 456L270 498L277 423L284 348Q280 320 250 320T215 348L229 498L172 456Q116 415 111 412T100 409Q87 409 76 420T64 447Q64 461 75 470L144 504L210 534L144 566Q136 570 122 576Q83 593 74 600T64 624Q64 639 75 649T100 660Q106 660 111 657T172 613L229 571Q229 578 222 643T215 721Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1000,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">、</text></g></g></g></g>',1),M=[H],L=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mtext",{mathcolor:"red"},"\\*"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mo",null,"、")])])],-1),N=a(`<ul><li><code>$*</code> 这个变量代表<strong>命令行中所有的参数</strong>，<code>$*</code>把所有的参数<strong>看成一个整体</strong></li><li><code>$@</code> 这个变量也代表<strong>命令行中所有的参数</strong>，不过<code>$@</code>把<strong>每个参数区分对待</strong></li></ul><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ vim parameter<span class="token punctuation">.</span>sh
<span class="token comment">#!/bin/bash</span>
echo <span class="token string-literal"><span class="token string">&#39;==========$n==========&#39;</span></span>
echo $<span class="token number">0</span>
echo $<span class="token number">1</span>
echo $<span class="token number">2</span>
echo <span class="token string-literal"><span class="token string">&#39;==========$#==========&#39;</span></span>
echo $<span class="token comment">#</span>
echo <span class="token string-literal"><span class="token string">&#39;==========$*==========&#39;</span></span>
echo $<span class="token operator">*</span>
echo <span class="token string-literal"><span class="token string">&#39;==========$@==========&#39;</span></span>
echo $@
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>parameter<span class="token punctuation">.</span>sh a b c d e f g
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span><span class="token variable">$n</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>
<span class="token punctuation">.</span><span class="token operator">/</span>parameter<span class="token punctuation">.</span>sh
a
b
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>$<span class="token comment">#==========</span>
<span class="token number">7</span>
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>$<span class="token operator">*=</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span>
a b c d e f g
<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>$@<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">=</span>
a b c d e f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="-2" tabindex="-1"><a class="header-anchor" href="#-2" aria-hidden="true">#</a> $？</h3><p><code>$？</code><strong>最后一次执行的命令的返回状态</strong>。如果这个变量的值为 0，证明上一 个命令正确执行；如果这个变量的值为非 0（具体是哪个数，由命令自己来决定），则证明 上一个命令执行不正确了。</p>`,4),S={href:"http://helloworld.sh",target:"_blank",rel:"noopener noreferrer"},R=a(`<div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>helloworld<span class="token punctuation">.</span>sh
hello world
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ echo $<span class="token operator">?</span>
<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><p>运算符有两种写法</p><ul><li><code>((表达式))</code></li><li><code>[ 表达式 ]</code> 注意 [] 里面左右要有空格</li></ul><h2 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h2><p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td><code>expr $a + $b</code> 结果为 30。</td></tr><tr><td>-</td><td>减法</td><td><code>expr $a - $b</code> 结果为 -10。</td></tr><tr><td>*</td><td>乘法</td><td><code>expr $a \\* $b</code> 结果为 200。</td></tr><tr><td>/</td><td>除法</td><td><code>expr $b / $a</code> 结果为 2。</td></tr><tr><td>%</td><td>取余</td><td><code>expr $b % $a</code> 结果为 0。</td></tr><tr><td>=</td><td>赋值</td><td>a=$b 把变量 b 的值赋给 a。</td></tr><tr><td>==</td><td>相等。用于比较两个数字，相同则返回 true。</td><td>[ $a == $b ] 返回 false。</td></tr><tr><td>!=</td><td>不相等。用于比较两个数字，不相同则返回 true。</td><td>[ $a != $b ] 返回 true。</td></tr></tbody></table>`,7),A={class:"MathJax",jax:"SVG",style:{position:"relative"}},D={style:{"vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.346ex",height:"1.505ex",role:"img",focusable:"false",viewBox:"0 -583 2362.8 665","aria-hidden":"true"},F=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(806.8,0)"><g data-mml-node="text"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g></g></g>',1),E=[F],Z=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"a"),s("mo",null,"==")])],-1),V=s("strong",null,"[ $a == $b ]",-1),z=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span>
<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">20</span>

<span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> $a + $b<span class="token variable">\`</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;a + b : <span class="token variable">$val</span>&quot;</span>

<span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> $a - $b<span class="token variable">\`</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;a - b : <span class="token variable">$val</span>&quot;</span>

<span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> $a <span class="token punctuation">\\</span>* $b<span class="token variable">\`</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;a * b : <span class="token variable">$val</span>&quot;</span>

<span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> $b / $a<span class="token variable">\`</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;b / a : <span class="token variable">$val</span>&quot;</span>

<span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> $b % $a<span class="token variable">\`</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;b % a : <span class="token variable">$val</span>&quot;</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 等于 b&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 不等于 b&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token number">10</span> <span class="token operator">-</span>eq <span class="token number">20</span><span class="token operator">:</span> a 不等于 b
<span class="token number">10</span> <span class="token operator">-</span>ne <span class="token number">20</span><span class="token operator">:</span> a 不等于 b
<span class="token number">10</span> <span class="token operator">-</span>gt <span class="token number">20</span><span class="token operator">:</span> a 不大于 b
<span class="token number">10</span> <span class="token operator">-</span>lt <span class="token number">20</span><span class="token operator">:</span> a 小于 b
<span class="token number">10</span> <span class="token operator">-</span>ge <span class="token number">20</span><span class="token operator">:</span> a 小于 b
<span class="token number">10</span> <span class="token operator">-</span>le <span class="token number">20</span><span class="token operator">:</span> a 小于或等于 b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TIP</p><ul><li>乘号<code>(*)</code>前边必须加反斜杠()才能实现乘法运算；</li><li><code>if...then...fi</code> 是条件语句，后续将会讲解。</li><li>在 <code>MAC</code> 中 <code>shell</code> 的 <code>expr</code> 语法是：<strong><code>$((表达式))</code></strong>，此处表达式中的 <code>&quot;*&quot;</code> 不需要转义符号 &quot;&quot; 。</li></ul><h2 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符" aria-hidden="true">#</a> 关系运算符</h2><p><strong>关系运算符只支持数字，不支持字符串，除非字符串的值是数字</strong>。</p><p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>-eq</td><td>检测两个数是否相等，相等返回 true。</td><td>[ $a -eq $b ] 返回 false。</td></tr><tr><td>-ne</td><td>检测两个数是否不相等，不相等返回 true。</td><td>[ $a -ne $b ] 返回 true。</td></tr><tr><td>-gt</td><td>检测左边的数是否大于右边的，如果是，则返回 true。</td><td>[ $a -gt $b ] 返回 false。</td></tr><tr><td>-lt</td><td>检测左边的数是否小于右边的，如果是，则返回 true。</td><td>[ $a -lt $b ] 返回 true。</td></tr><tr><td>-ge</td><td>检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td>[ $a -ge $b ] 返回 false。</td></tr><tr><td>-le</td><td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td>[ $a -le $b ] 返回 true。</td></tr></tbody></table><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span>
<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">20</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-eq</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -eq <span class="token variable">$b</span> : a 等于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -eq <span class="token variable">$b</span>: a 不等于 b&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-ne</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -ne <span class="token variable">$b</span>: a 不等于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -ne <span class="token variable">$b</span> : a 等于 b&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-gt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -gt <span class="token variable">$b</span>: a 大于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -gt <span class="token variable">$b</span>: a 不大于 b&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-lt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -lt <span class="token variable">$b</span>: a 小于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -lt <span class="token variable">$b</span>: a 不小于 b&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-ge</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -ge <span class="token variable">$b</span>: a 大于或等于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -ge <span class="token variable">$b</span>: a 小于 b&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-le</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -le <span class="token variable">$b</span>: a 小于或等于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> -le <span class="token variable">$b</span>: a 大于 b&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">20</span> <span class="token operator">:</span> a 不等于 b
<span class="token number">10</span> 小于 <span class="token number">100</span> 且 <span class="token number">20</span> 大于 <span class="token number">15</span> <span class="token operator">:</span> 返回 <span class="token boolean">true</span>
<span class="token number">10</span> 小于 <span class="token number">100</span> 或 <span class="token number">20</span> 大于 <span class="token number">100</span> <span class="token operator">:</span> 返回 <span class="token boolean">true</span>
<span class="token number">10</span> 小于 <span class="token number">5</span> 或 <span class="token number">20</span> 大于 <span class="token number">100</span> <span class="token operator">:</span> 返回 <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::TIP</p><p>这里我们使用 <code>((表达式))</code> 来做判断的话。在 <code>((表达式))</code> 中就可以写 <code>&lt;,&gt;,&lt;=,&gt;=,=</code>这些数学的运算符号</p><p>:::</p><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h2><p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:</p>`,15),I=s("br",null,null,-1),B=s("br",null,null,-1),C={class:"MathJax",jax:"SVG",style:{position:"relative"}},O={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"39.827ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 17603.4 1000","aria-hidden":"true"},G=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(651.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1651.4,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(2128.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(2489.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mtext" fill="red" stroke="red" transform="translate(3989.4,0)"><path data-c="5C" d="M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z"></path><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" fill="red" stroke="red" transform="translate(4767.4,0)"><path data-c="5C" d="M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z"></path><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" transform="translate(500,0)"></path></g><g data-mml-node="mi" transform="translate(5545.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">返</text></g><g data-mml-node="mi" transform="translate(6545.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">回</text></g><g data-mml-node="mi" transform="translate(7545.4,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(8095.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(8624.4,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(8922.4,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(9391.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(9857.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(10135.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(10413.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(10691.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(10969.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(11247.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">逻</text></g><g data-mml-node="mi" transform="translate(12247.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">辑</text></g><g data-mml-node="mi" transform="translate(13247.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(14247.4,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(15010.4,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(15769.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mtext" fill="red" stroke="red" transform="translate(16047.4,0)"><path data-c="5C" d="M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z"></path><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" fill="red" stroke="red" transform="translate(16825.4,0)"><path data-c="5C" d="M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z"></path><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" transform="translate(500,0)"></path></g></g></g>',1),W=[G],j=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"b"),s("mo",null,"−"),s("mi",null,"g"),s("mi",null,"t"),s("mn",null,"100"),s("mtext",{mathcolor:"red"},"\\]"),s("mtext",{mathcolor:"red"},"\\]"),s("mi",{mathvariant:"normal"},"返"),s("mi",{mathvariant:"normal"},"回"),s("mi",null,"f"),s("mi",null,"a"),s("mi",null,"l"),s("mi",null,"s"),s("mi",null,"e"),s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mi",{mathvariant:"normal"},"逻"),s("mi",{mathvariant:"normal"},"辑"),s("mi",{mathvariant:"normal"},"的"),s("mi",null,"O"),s("mi",null,"R"),s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mtext",{mathcolor:"red"},"\\["),s("mtext",{mathcolor:"red"},"\\[")])],-1),P=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">!</span>/bin/bash

<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span>
<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">20</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-lt</span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$b</span> <span class="token parameter variable">-gt</span> <span class="token number">100</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;返回 true&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;返回 false&quot;</span>
<span class="token keyword">fi</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-lt</span> <span class="token number">100</span> <span class="token operator">||</span> <span class="token variable">$b</span> <span class="token parameter variable">-gt</span> <span class="token number">100</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;返回 true&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;返回 false&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串运算符" tabindex="-1"><a class="header-anchor" href="#字符串运算符" aria-hidden="true">#</a> 字符串运算符</h2><p>下表列出了常用的字符串运算符，假定变量 a 为 &quot;abc&quot;，变量 b 为 &quot;efg&quot;：</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>=</td><td>检测两个字符串是否相等，相等返回 true。</td><td>[ $a = $b ] 返回 false。</td></tr><tr><td>!=</td><td>检测两个字符串是否不相等，不相等返回 true。</td><td>[ $a != $b ] 返回 true。</td></tr><tr><td>-z</td><td>检测字符串长度是否为 0，为 0 返回 true。</td><td>[ -z $a ] 返回 false。</td></tr><tr><td>-n</td><td>检测字符串长度是否不为 0，不为 0 返回 true。</td><td>[ -n &quot;$a&quot; ] 返回 true。</td></tr><tr><td>$</td><td>检测字符串是否不为空，不为空返回 true。</td><td>[ $a ] 返回 true。</td></tr></tbody></table><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token string">&quot;abc&quot;</span>
<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token string">&quot;efg&quot;</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> = <span class="token variable">$b</span> : a 等于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> = <span class="token variable">$b</span>: a 不等于 b&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> != <span class="token variable">$b</span> : a 不等于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> != <span class="token variable">$b</span>: a 等于 b&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$a</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;-z <span class="token variable">$a</span> : 字符串长度为 0&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;-z <span class="token variable">$a</span> : 字符串长度不为 0&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;<span class="token variable">$a</span>&quot;</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;-n <span class="token variable">$a</span> : 字符串长度不为 0&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;-n <span class="token variable">$a</span> : 字符串长度为 0&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> : 字符串不为空&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$a</span> : 字符串为空&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code>abc <span class="token operator">=</span> efg<span class="token operator">:</span> a 不等于 b
abc <span class="token operator">!=</span> efg <span class="token operator">:</span> a 不等于 b
<span class="token operator">-</span>z abc <span class="token operator">:</span> 字符串长度不为 <span class="token number">0</span>
<span class="token operator">-</span>n abc <span class="token operator">:</span> 字符串长度不为 <span class="token number">0</span>
abc <span class="token operator">:</span> 字符串不为空
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件测试运算符" tabindex="-1"><a class="header-anchor" href="#文件测试运算符" aria-hidden="true">#</a> 文件测试运算符</h2><p>文件测试运算符用于检测 Unix 文件的各种属性。</p><p>属性检测描述如下：</p><table><thead><tr><th>操作符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>-b file</td><td>检测文件是否是块设备文件，如果是，则返回 true。</td><td>[ -b $file ] 返回 false。</td></tr><tr><td>-c file</td><td>检测文件是否是字符设备文件，如果是，则返回 true。</td><td>[ -c $file ] 返回 false。</td></tr><tr><td>-d file</td><td>检测文件是否是目录，如果是，则返回 true。</td><td>[ -d $file ] 返回 false。</td></tr><tr><td>-f file</td><td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td>[ -f $file ] 返回 true。</td></tr><tr><td>-g file</td><td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td>[ -g $file ] 返回 false。</td></tr><tr><td>-k file</td><td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td><td>[ -k $file ] 返回 false。</td></tr><tr><td>-p file</td><td>检测文件是否是有名管道，如果是，则返回 true。</td><td>[ -p $file ] 返回 false。</td></tr><tr><td>-u file</td><td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td>[ -u $file ] 返回 false。</td></tr><tr><td>-r file</td><td>检测文件是否可读，如果是，则返回 true。</td><td>[ -r $file ] 返回 true。</td></tr><tr><td>-w file</td><td>检测文件是否可写，如果是，则返回 true。</td><td>[ -w $file ] 返回 true。</td></tr><tr><td>-x file</td><td>检测文件是否可执行，如果是，则返回 true。</td><td>[ -x $file ] 返回 true。</td></tr><tr><td>-s file</td><td>检测文件是否为空（文件大小是否大于 0），不为空返回 true。</td><td>[ -s $file ] 返回 true。</td></tr><tr><td>-e file</td><td>检测文件（包括目录）是否存在，如果是，则返回 true。</td><td>[ -e $file ] 返回 true。</td></tr></tbody></table><p>其他检查符：</p><ul><li><strong>-S</strong>: 判断某文件是否 socket。</li><li><strong>-L</strong>: 检测文件是否存在并且是一个符号链接。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># 变量 file 表示文件 /var/www/runoob/test.sh，它的大小为 100 字节，具有 rwx 权限。下面的代码，将检测该文件的各种属性：</span>
<span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token string">&quot;/var/www/runoob/test.sh&quot;</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-r</span> <span class="token variable">$file</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件可读&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件不可读&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-w</span> <span class="token variable">$file</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件可写&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件不可写&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-x</span> <span class="token variable">$file</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件可执行&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件不可执行&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token variable">$file</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件为普通文件&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件为特殊文件&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token variable">$file</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件是个目录&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件不是个目录&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token variable">$file</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件不为空&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件为空&quot;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-e</span> <span class="token variable">$file</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件存在&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;文件不存在&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code>文件可读
文件可写
文件可执行
文件为普通文件
文件不是个目录
文件不为空
文件存在
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="流程控制-重点" tabindex="-1"><a class="header-anchor" href="#流程控制-重点" aria-hidden="true">#</a> 流程控制（重点）</h2><h2 id="if-else" tabindex="-1"><a class="header-anchor" href="#if-else" aria-hidden="true">#</a> if else</h2><h3 id="fi" tabindex="-1"><a class="header-anchor" href="#fi" aria-hidden="true">#</a> fi</h3><p>if 语句语法格式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> condition
<span class="token keyword">then</span>
    command1
    command2
    <span class="token punctuation">..</span>.
    commandN
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写成一行（适用于终端命令提示符）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-c</span> <span class="token string">&quot;ssh&quot;</span><span class="token variable">)</span></span> <span class="token parameter variable">-gt</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">;</span> <span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>TIP</p><p>末尾的 <strong>fi</strong> 就是 <strong>if</strong> 倒过来拼写，后面还会遇到类似的。</p><p>简单的说就是和<code>JS</code>中的 <code>if() { }</code> 这里的 <code>{}</code> 代表一个区域表示<code>if</code>成立了执行这个区域里面的代码，但在<code>Shell</code>中 <code>{}</code> 有这其他的含义，所以 <strong><code>if</code> 代表开始 <code>fi</code> 代表结束把中间的代码框起来表示<code>if</code>成立后执行的代码。</strong></p><p><strong>其中 if 后的语句成功执行就会跳转到 then 后的语句，否则不跳转</strong>，then 表示判断成功后要执行的语句。</p><h3 id="if-else-1" tabindex="-1"><a class="header-anchor" href="#if-else-1" aria-hidden="true">#</a> if else</h3><p>if else 语法格式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> condition
<span class="token keyword">then</span>
    command1
    command2
    <span class="token punctuation">..</span>.
    commandN
<span class="token keyword">else</span>
    <span class="token builtin class-name">command</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="if-else-if-else" tabindex="-1"><a class="header-anchor" href="#if-else-if-else" aria-hidden="true">#</a> if else-if else</h3><p><code>if else-if else</code> 语法格式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> condition1
<span class="token keyword">then</span>
    command1
<span class="token keyword">elif</span> condition2
<span class="token keyword">then</span>
    command2
<span class="token keyword">else</span>
    commandN
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>if else 的 <strong>[...]</strong> 判断语句中大于使用 <strong>-gt</strong>，小于使用 <strong>-lt</strong>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$a</span>&quot;</span> <span class="token parameter variable">-gt</span> <span class="token string">&quot;<span class="token variable">$b</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token punctuation">..</span>.
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用 <strong>((...))</strong> 作为判断语句，大于和小于可以直接使用 <strong>&gt;</strong> 和 <strong>&lt;</strong>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token variable"><span class="token punctuation">((</span> a <span class="token operator">&gt;</span> b <span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token punctuation">..</span>.
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下实例判断两个变量是否相等：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span>
<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">20</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 等于 b&quot;</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-gt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 大于 b&quot;</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-lt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 小于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;没有符合的条件&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><p>if else 语句经常与 test 命令结合使用，如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">num1</span><span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token number">2</span>*3<span class="token punctuation">]</span>
<span class="token assign-left variable">num2</span><span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token number">1</span>+5<span class="token punctuation">]</span>
<span class="token keyword">if</span> <span class="token builtin class-name">test</span> $<span class="token punctuation">[</span>num1<span class="token punctuation">]</span> <span class="token parameter variable">-eq</span> $<span class="token punctuation">[</span>num2<span class="token punctuation">]</span>
<span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&#39;两个数字相等!&#39;</span>
<span class="token keyword">else</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&#39;两个数字不相等!&#39;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><h2 id="case-esac" tabindex="-1"><a class="header-anchor" href="#case-esac" aria-hidden="true">#</a> case ... esac</h2><p><strong><code>case ... esac</code></strong> 为多选择语句，<strong>与其他语言中的 <code>switch ... case</code> 语句类似</strong>，是一种多分支选择结构，每个 <code>case</code> 分支用右圆括号开始，用两个分号 <strong>;;</strong> 表示 break，即执行结束，跳出整个 <code>case ... esac</code> 语句，<code>esac</code>（就是 <code>case</code> 反过来）作为结束标记。</p><p>可以用 case 语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。</p><p><strong><code>case ... esac</code></strong> 语法格式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">case</span> 值 <span class="token keyword">in</span>
模式1<span class="token punctuation">)</span>
    command1
    command2
    <span class="token punctuation">..</span>.
    commandN
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
模式2<span class="token punctuation">)</span>
    command1
    command2
    <span class="token punctuation">..</span>.
    commandN
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>case</code> 工作方式如上所示，取值后面必须为单词 <strong>in</strong>，每一模式必须以右括号结束。取值可以为变量或常数，匹配发现取值符合某一模式后，其间所有命令开始执行直至 <strong>;;</strong>。</p><p>取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。</p><p>下面的脚本提示输入 1 到 4，与每一种模式进行匹配：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;输入 1 到 4 之间的数字:&#39;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;你输入的数字为:&#39;</span>
<span class="token builtin class-name">read</span> aNum
<span class="token keyword">case</span> <span class="token variable">$aNum</span> <span class="token keyword">in</span>
    <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">&#39;你选择了 1&#39;</span>
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">&#39;你选择了 2&#39;</span>
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">&#39;你选择了 3&#39;</span>
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">&#39;你选择了 4&#39;</span>
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
    *<span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">&#39;你没有输入 1 到 4 之间的数字&#39;</span>
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入不同的内容，会有不同的结果，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>输入 <span class="token number">1</span> 到 <span class="token number">4</span> 之间的数字:
你输入的数字为:
<span class="token number">3</span>
你选择了 <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="for-循环" tabindex="-1"><a class="header-anchor" href="#for-循环" aria-hidden="true">#</a> for 循环</h2><p>与其他编程语言类似，<code>Shell</code>支持<code>for</code>循环。</p><p><strong>写法一</strong></p><p><code>for</code>循环一般格式为</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">var</span> <span class="token keyword">in</span> item1 item2 <span class="token punctuation">..</span>. itemN
<span class="token keyword">do</span>
    command1
    command2
    <span class="token punctuation">..</span>.
    commandN
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写成一行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">var</span> <span class="token keyword">in</span> item1 item2 <span class="token punctuation">..</span>. itemN<span class="token punctuation">;</span> <span class="token keyword">do</span> command1<span class="token punctuation">;</span> command2… <span class="token keyword">done</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>TIP</p><p>这里 <code>do</code> 和 <code>done</code> 就和 <code>{ }</code> 一样来确定范围</p><p>当变量值在列表里，<code>for</code> 循环即执行一次所有命令，使用变量名获取列表中的当前取值。命令可为任何有效的 <code>shell</code> 命令和语句。<code>in</code> 列表可以包含替换、字符串和文件名。</p><p><code>in</code>列表是可选的，如果不用它，for 循环使用命令行的位置参数。</p><p>例如，顺序输出当前列表中的数字：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">loop</span> <span class="token keyword">in</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span>
<span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;The value is: <span class="token variable">$loop</span>&quot;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>The value is: <span class="token number">1</span>
The value is: <span class="token number">2</span>
The value is: <span class="token number">3</span>
The value is: <span class="token number">4</span>
The value is: <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>顺序输出字符串中的字符：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token keyword">for</span> <span class="token for-or-select variable">str</span> <span class="token keyword">in</span> This is a string
<span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$str</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><p><strong>写法二</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> 初始值<span class="token punctuation">;</span>循环控制条件<span class="token punctuation">;</span>变量变化 <span class="token punctuation">))</span></span>
<span class="token keyword">do</span>
程序
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从 1 加到 100 ,<code>for1.sh</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span>
<span class="token keyword">do</span>
<span class="token assign-left variable">sum</span><span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$sum</span>+<span class="token variable">$i</span><span class="token punctuation">]</span>
<span class="token keyword">done</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$sum</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-crystal line-numbers-mode" data-ext="crystal"><pre class="language-crystal"><code><span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ chmod <span class="token number">777</span> for1<span class="token punctuation">.</span>sh
<span class="token punctuation">[</span>atguigu<span class="token variable">@hadoop101</span> shells<span class="token punctuation">]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>for1<span class="token punctuation">.</span>sh
<span class="token number">5050</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="while-语句" tabindex="-1"><a class="header-anchor" href="#while-语句" aria-hidden="true">#</a> while 语句</h2><p><code>while</code> 循环用于不断执行一系列命令，也用于从输入文件中读取数据。其语法格式为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">while</span> condition
<span class="token keyword">do</span>
    <span class="token builtin class-name">command</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是一个基本的 <code>while</code> 循环，测试条件是：如果 <code>int</code> 小于等于 5，那么条件返回真。<code>int</code> 从 1 开始，每次循环处理时，<code>int</code> 加 1。运行上述脚本，返回数字 1 到 5，然后终止。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">int</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token keyword">while</span><span class="token variable"><span class="token punctuation">((</span> $int<span class="token operator">&lt;=</span><span class="token number">5</span> <span class="token punctuation">))</span></span>
<span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$int</span>
    <span class="token builtin class-name">let</span> <span class="token string">&quot;int++&quot;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行脚本，输出：</p>`,81),J=s("code",null,"Bash let",-1),U={href:"https://www.runoob.com/linux/linux-comm-let.html",target:"_blank",rel:"noopener noreferrer"},X=a(`<p><code>while</code>循环可用于读取键盘信息。下面的例子中，输入信息被设置为变量<code>FILM</code>，按<code>&lt;Ctrl-D&gt;</code>结束循环。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;按下 &lt;CTRL-D&gt; 退出&#39;</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;输入你最喜欢的网站名: &#39;</span>
<span class="token keyword">while</span> <span class="token builtin class-name">read</span> FILM
<span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;是的！<span class="token variable">$FILM</span> 是一个好网站&quot;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="无限循环" tabindex="-1"><a class="header-anchor" href="#无限循环" aria-hidden="true">#</a> 无限循环</h3><p>无限循环语法格式：</p><p>或者</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">while</span> <span class="token boolean">true</span>
<span class="token keyword">do</span>
    <span class="token builtin class-name">command</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p><h2 id="until-循环" tabindex="-1"><a class="header-anchor" href="#until-循环" aria-hidden="true">#</a> until 循环</h2><p><code>until</code> 循环执行一系列命令直至条件为 true 时停止。</p><p><code>until</code> 循环与 <code>while</code> 循环在处理方式上刚好相反。</p><p>一般 <code>while</code> 循环优于 <code>until</code> 循环，但在某些时候—也只是极少数情况下，<code>until</code> 循环更加有用。</p><p><code>until</code> 语法格式:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">until</span> condition
<span class="token keyword">do</span>
    <span class="token builtin class-name">command</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>condition</code> 一般为条件表达式，如果返回值为 <code>false</code>，则继续执行循环体内的语句，否则跳出循环。</p><p>以下实例我们使用 <code>until</code> 命令来输出 <code>0 ~ 9</code> 的数字：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">0</span>

<span class="token keyword">until</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token variable">$a</span> <span class="token parameter variable">-lt</span> <span class="token number">10</span> <span class="token punctuation">]</span>
<span class="token keyword">do</span>
   <span class="token builtin class-name">echo</span> <span class="token variable">$a</span>
   <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> $a + <span class="token number">1</span><span class="token variable">\`</span></span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为：</p><h2 id="跳出循环" tabindex="-1"><a class="header-anchor" href="#跳出循环" aria-hidden="true">#</a> 跳出循环</h2><p>在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell 使用两个命令来实现该功能：<strong>break</strong> 和 <strong>continue</strong>。</p><h3 id="break-命令" tabindex="-1"><a class="header-anchor" href="#break-命令" aria-hidden="true">#</a> break 命令</h3><p>break 命令允许跳出所有循环（终止执行后面的所有循环）。</p><p>下面的例子中，脚本进入死循环直至用户输入数字大于 5。要跳出这个循环，返回到 shell 提示符下，需要使用 break 命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">while</span> <span class="token builtin class-name">:</span>
<span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;输入 1 到 5 之间的数字:&quot;</span>
    <span class="token builtin class-name">read</span> aNum
    <span class="token keyword">case</span> <span class="token variable">$aNum</span> <span class="token keyword">in</span>
        <span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">4</span><span class="token operator">|</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;你输入的数字为 <span class="token variable">$aNum</span>!&quot;</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
        *<span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;</span>
            <span class="token builtin class-name">break</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token keyword">esac</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以上代码，输出结果为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>输入 <span class="token number">1</span> 到 <span class="token number">5</span> 之间的数字:3
你输入的数字为 <span class="token number">3</span><span class="token operator">!</span>
输入 <span class="token number">1</span> 到 <span class="token number">5</span> 之间的数字:7
你输入的数字不是 <span class="token number">1</span> 到 <span class="token number">5</span> 之间的<span class="token operator">!</span> 游戏结束
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="continue" tabindex="-1"><a class="header-anchor" href="#continue" aria-hidden="true">#</a> continue</h3><p><code>continue</code> 命令与 <code>break</code> 命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。</p><p>对上面的例子进行修改：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">while</span> <span class="token builtin class-name">:</span>
<span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;输入 1 到 5 之间的数字: &quot;</span>
    <span class="token builtin class-name">read</span> aNum
    <span class="token keyword">case</span> <span class="token variable">$aNum</span> <span class="token keyword">in</span>
        <span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">4</span><span class="token operator">|</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;你输入的数字为 <span class="token variable">$aNum</span>!&quot;</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
        *<span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;你输入的数字不是 1 到 5 之间的!&quot;</span>
            <span class="token builtin class-name">continue</span>
            <span class="token builtin class-name">echo</span> <span class="token string">&quot;游戏结束&quot;</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token keyword">esac</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行代码发现，当输入大于 5 的数字时，该例中的循环不会结束，语句 <strong>echo &quot;游戏结束&quot;</strong> 永远不会被执行。</p><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><h2 id="函数定义" tabindex="-1"><a class="header-anchor" href="#函数定义" aria-hidden="true">#</a> 函数定义</h2><p><code>linux shell</code> 可以用户定义函数，然后在 shell 脚本中可以随便调用。</p><p><code>shell</code>中函数的定义格式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span> <span class="token keyword">function</span> <span class="token punctuation">]</span> funname <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token punctuation">{</span>

    action<span class="token punctuation">;</span>

    <span class="token punctuation">[</span>return int<span class="token punctuation">;</span><span class="token punctuation">]</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li>1、可以带<code>function fun()</code> 定义，也可以直接<code>fun()</code> 定义,不带任何参数。</li><li>2、参数返回，可以显示加：<code>return</code> 返回，如果不加，将以最后一条命令运行结果，作为返回值。 <code>return</code>后跟数值<code>n(0-255）</code></li></ul><p>下面的例子定义了一个函数并进行调用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token function-name function">demoFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;这是我的第一个 shell 函数!&quot;</span>
<span class="token punctuation">}</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;-----函数开始执行-----&quot;</span>
demoFun
<span class="token builtin class-name">echo</span> <span class="token string">&quot;-----函数执行完毕-----&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-----函数开始执行-----
这是我的第一个 shell 函数<span class="token operator">!</span>
-----函数执行完毕-----
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面定义一个带有<code>return</code>语句的函数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token function-name function">funWithReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;这个函数会对输入的两个数字进行相加运算...&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;输入第一个数字: &quot;</span>
    <span class="token builtin class-name">read</span> aNum
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;输入第二个数字: &quot;</span>
    <span class="token builtin class-name">read</span> anotherNum
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;两个数字分别为 <span class="token variable">$aNum</span> 和 <span class="token variable">$anotherNum</span> !&quot;</span>
    <span class="token builtin class-name">return</span> <span class="token variable"><span class="token variable">$((</span>$aNum<span class="token operator">+</span>$anotherNum<span class="token variable">))</span></span>
<span class="token punctuation">}</span>
funWithReturn
<span class="token builtin class-name">echo</span> <span class="token string">&quot;输入的两个数字之和为 <span class="token variable">$?</span> !&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出类似下面：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>这个函数会对输入的两个数字进行相加运算<span class="token punctuation">..</span>.
输入第一个数字:
<span class="token number">1</span>
输入第二个数字:
<span class="token number">2</span>
两个数字分别为 <span class="token number">1</span> 和 <span class="token number">2</span> <span class="token operator">!</span>
输入的两个数字之和为 <span class="token number">3</span> <span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数返回值在调用该函数后通过 <code>$?</code> 来获得。</p><p>TIP</p><p>注意：<strong>所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分</strong>，直至<code>shell</code>解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</p><h2 id="函数参数" tabindex="-1"><a class="header-anchor" href="#函数参数" aria-hidden="true">#</a> 函数参数</h2><p>在<code>Shell</code>中，调用函数时可以向其传递参数。在函数体内部，通过 <code>$n</code> 的形式来获取参数的值，例如，<code>$1</code>表示第一个参数，$2 表示第二个参数...</p><p>带参数的函数示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token function-name function">funWithParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;第一个参数为 <span class="token variable">$1</span> !&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;第二个参数为 <span class="token variable">$2</span> !&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;第十个参数为 <span class="token variable">$10</span> !&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;第十个参数为 <span class="token variable">\${10}</span> !&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;第十一个参数为 <span class="token variable">\${11}</span> !&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;参数总数有 <span class="token variable">$#</span> 个!&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;作为一个字符串输出所有参数 <span class="token variable">$*</span> !&quot;</span>
<span class="token punctuation">}</span>
funWithParam <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">34</span> <span class="token number">73</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>第一个参数为 <span class="token number">1</span> <span class="token operator">!</span>
第二个参数为 <span class="token number">2</span> <span class="token operator">!</span>
第十个参数为 <span class="token number">10</span> <span class="token operator">!</span>
第十个参数为 <span class="token number">34</span> <span class="token operator">!</span>
第十一个参数为 <span class="token number">73</span> <span class="token operator">!</span>
参数总数有 <span class="token number">11</span> 个<span class="token operator">!</span>
作为一个字符串输出所有参数 <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">34</span> <span class="token number">73</span> <span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TIP</p><p>注意，<code>$10</code> 不能获取第十个参数，<strong>获取第十个参数需要<code>\${10}</code>。当<code>n&gt;=10</code>时，需要使用<code>\${n}</code>来获取参数</strong>。</p><p>另外，还有几个特殊字符用来处理参数：</p><table><thead><tr><th>参数处理</th><th>说明</th></tr></thead><tbody><tr><td>$#</td><td>传递到脚本或函数的参数个数</td></tr><tr><td>$*</td><td>以一个单字符串显示所有向脚本传递的参数</td></tr><tr><td>$$</td><td>脚本运行的当前进程 ID 号</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的 ID 号</td></tr><tr><td>$@</td><td>与$*相同，但是使用时加引号，并在引号中返回每个参数。</td></tr><tr><td>$-</td><td>显示 Shell 使用的当前选项，与 set 命令功能相同。</td></tr><tr><td>$?</td><td>显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><h2 id="获取函数的返回值" tabindex="-1"><a class="header-anchor" href="#获取函数的返回值" aria-hidden="true">#</a> 获取函数的返回值</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token function-name function">getsum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin class-name">local</span> <span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token number">0</span>  <span class="token comment">#局部变量</span>
    <span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span>$<span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>$<span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token variable"><span class="token punctuation">((</span>sum<span class="token operator">+=</span>i<span class="token punctuation">))</span></span>
    <span class="token keyword">done</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$sum</span>
    <span class="token builtin class-name">return</span> <span class="token variable">$?</span> <span class="token comment"># 这里$?就是 echo $sum 执行的结果</span>
<span class="token punctuation">}</span>
<span class="token builtin class-name">read</span> m
<span class="token builtin class-name">read</span> n
<span class="token assign-left variable">total</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>getsum $m $n<span class="token variable">)</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;The sum is <span class="token variable">$total</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TIP</p><p>函数没有<code>return</code>的时候返回值是<strong>最后一行代码的执行结果</strong>。</p><h2 id="正侧表达式" tabindex="-1"><a class="header-anchor" href="#正侧表达式" aria-hidden="true">#</a> 正侧表达式</h2><h2 id="基本正侧表达式" tabindex="-1"><a class="header-anchor" href="#基本正侧表达式" aria-hidden="true">#</a> 基本正侧表达式</h2><p>正则表达式和通配符的区别：</p><ul><li>正则表达式用来在文件中匹配符合条件的字符串，正则是包含匹配. <code>grep</code>、<code>awk</code>、<code>sed</code> 等命令可以支持正则表达式。</li><li>通配符<code>（ ？[]）</code>是用来匹配符合条件的文件名<code>*</code>，通配符是完全匹配。<code>ls</code>、<code>find</code>、<code>cp</code> 等命令不支持正则表达式，所有只能使用 <code>shell</code> 自己的通配符来进行匹配了。</li></ul><table><thead><tr><th>元字符</th><th>作用</th></tr></thead><tbody><tr><td><code>*</code></td><td>前一个字符匹配 0 次或者任意多次</td></tr><tr><td><code>.</code></td><td>匹配除了换行符外任意一个字符</td></tr><tr><td><code>^</code></td><td>匹配行首，</td></tr><tr><td>例如：<code>^hello</code>会匹配以<code>hello</code>开头的行。</td><td></td></tr><tr><td><code>$</code></td><td>匹配行首，</td></tr><tr><td>例如：<code>hello$</code>会匹配以<code>hello</code>开头的行。</td><td></td></tr><tr><td><code>[ ]</code></td><td>匹配括号中指定的任意一个字符，只匹配一个字符</td></tr><tr><td><code>[ ^]</code></td><td>匹配除中括号的字符意外的任意一个字符。</td></tr><tr><td>例如：<code>[^0-9]</code>匹配任意一个非数字字符。</td><td></td></tr><tr><td><code>\\</code></td><td>转义符。用于将特殊符号的含义取消</td></tr><tr><td><code>{n}</code></td><td>表示其前面的字符签好出现 n 次。</td></tr><tr><td>例如：<code>[0-9]{4}</code>匹配 4 位数字，<code>[1][3-8][0-9]{9}</code> 匹配手机号码</td><td></td></tr><tr><td><code>{n,}</code></td><td>表示七千亩的字符出现不小于 n 次。</td></tr><tr><td>例如：<code>[0-9]{2,}</code>表示两位及以上的数字</td><td></td></tr><tr><td><code>{n,m}</code></td><td>表示其前面的字符至少出现 n 次，最多出现 m 次。</td></tr><tr><td>例如：<code>[a-z]{6,8}</code>匹配 6 到 8 为的小写子母。</td><td></td></tr></tbody></table><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">grep</span> <span class="token string">&quot;a*&quot;</span> test_rule.txt
<span class="token comment">#匹配所有内容，包括空白行</span>
<span class="token function">grep</span> <span class="token string">&quot;aaaa*&quot;</span> test_rule.txt
<span class="token comment">#匹配最少包含三个连续a的字符串</span>
<span class="token function">grep</span> <span class="token string">&quot;s..d&quot;</span> test_rule.txt
<span class="token comment">#匹配在s和d两个子母之间的有两个字符的单词</span>
<span class="token function">grep</span> <span class="token string">&quot;s.*d&quot;</span> test_rule.txt
<span class="token comment">#匹配在s和d之间有任意字符的单词所在的行</span>
<span class="token function">grep</span> <span class="token string">&quot;^M&quot;</span> test_rule.txt
<span class="token comment">#匹配以大写子母M开头的行</span>
<span class="token function">grep</span> <span class="token string">&quot;n$&quot;</span> test_rule.txt
<span class="token comment">#匹配以小写n结尾的行</span>
<span class="token function">grep</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;^$&quot;</span> test_rule.txt
<span class="token comment">#匹配空白行</span>
<span class="token function">grep</span> <span class="token string">&quot;^[a-z]&quot;</span> test_rule.txt
<span class="token comment">#匹配以小写子母开头的行</span>
<span class="token function">grep</span> <span class="token string">&quot;\\.$&quot;</span> test_rule.txt
<span class="token comment">#匹配以.结尾的行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常用正侧表达式" tabindex="-1"><a class="header-anchor" href="#常用正侧表达式" aria-hidden="true">#</a> 常用正侧表达式</h2><p>| 字符 | 描述 |<br> | --- | --- | --- | --- |<br> | <code>\\</code> | 将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。 |<br> | 例如：<code>“n”</code>匹配字符<code>“n”</code>。<code>“\\n”</code>匹配一个换行符。序列<code>“\\\\”</code>匹配<code>“\\”</code>而<code>“\\(”</code>则匹配<code>“(”</code>。 |<br> | <code>^</code> | 匹配输入字符串的开始位置。如果设置了 <code>RegExp</code> 对象的 <code>Multiline</code> 属性，<code>^</code>也匹配<code>“\\n”</code>或<code>“\\r”</code>之后的位置。 |<br> | <code>$</code> | 匹配输入字符串的结束位置。如果设置了 <code>RegExp</code> 对象的 <code>Multiline</code> 属性，$也匹配<code>“\\n”</code>或<code>“\\r”</code>之前的位置。 |<br> | <code>*</code> | 匹配前面的子表达式零次或多次。 |<br> | 例如：<code>zo*</code>能匹配<code>“z”</code>以及<code>“zoo”</code>。<code>*</code>等价于<code>{0,}</code>。 |<br> | <code>+</code> | 匹配前面的子表达式一次或多次。 |<br> | 例如：<code>“zo+”</code>能匹配<code>“zo”</code>以及<code>“zoo”</code>，但不能匹配<code>“z”</code>。<code>+</code>等价于<code>{1,}</code>。 |<br> | <code>?</code> | 匹配前面的子表达式零次或一次。 |<br> | 例如：<code>“do(es)?”</code>可以匹配<code>“do”</code>或<code>“does”</code>中的<code>“do”</code>。<code>?</code>等价于<code>{0,1}</code>。 |<br> | <code>{n}</code> | <code>n</code> 是一个非负整数。匹配确定的 <code>n</code> 次。 |<br> | 例如：<code>“o{2}”</code>不能匹配<code>“Bob”</code>中的<code>“o”</code>，但是能匹配<code>“food”</code>中的两个 o。 |<br> | <code>{n,}</code> | <code>n</code> 是一个非负整数。至少匹配 <code>n</code> 次。 |<br> | 例如：<code>“o{2,}”</code>不能匹配<code>“Bob”</code>中的<code>“o”</code>，但能匹配<code>“foooood”</code>中的所有 <code>o</code>。<code>“o{1,}”</code>等价于<code>“o+”</code>。<code>“o{0,}”</code>则等价于<code>“o*”</code>。 |<br> | <code>{n,m}</code> | <code>m</code> 和 <code>n</code> 均为非负整数，其中 <code>n&lt;=m</code>。最少匹配 <code>n</code> 次且最多匹配 <code>m</code> 次。 |<br> | 例如：<code>“o{1,3}”</code>将匹配<code>“fooooood”</code>中的前三个 <code>o</code>。<code>“o{0,1}”</code>等价于<code>“o?”</code>。请注意在逗号和两个数之间不能有空格。 |<br> | <code>?</code> | 当该字符紧跟在任何一个其他限制符<code>（*,+,?，{n}，{n,}，{n,m}）</code>后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。 |<br> | 例如：对于字符串<code>“oooo”</code>，<code>“o+?”</code>将匹配单个<code>“o”</code>，而<code>“o+”</code>将匹配所有“o”。 |<br> | <code>.</code> | 匹配除<code>“\\n”</code>之外的任何单个字符。要匹配包括<code>“\\n”</code>在内的任何字符，请使用像<code>“[.\\n]”</code>的模式。 |<br> | <code>(pattern)</code> | 匹配 <code>pattern</code> 并获取这一匹配。所获取的匹配可以从产生的 <code>Matches</code> 集合得到，在 <code>VBScript</code> 中使用 <code>SubMatches</code> 集合，在 <code>JScript</code> 中则使用<code>$0…$9</code> 属性。要匹配圆括号字符，请使用“”或“”或“”。 |<br> | <code>(?:pattern)</code> | 匹配 <code>pattern</code> 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符<code>“( | )”</code>来组合一个模式的各个部分是很有用。 |<br> | 例如<code>“industr(?:y | ies)”</code>就是一个比<code>“industry | industries”</code>更简略的表达式。 |<br> | <code>(?=pattern)</code> | 正向预查，在任何匹配 <code>pattern</code> 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。 |<br> | 例如：<code>“Windows(?=95 | 98 | NT | 2000)”</code>能匹配<code>“Windows2000”</code>中的<code>“Windows”</code>，但不能匹配<code>“Windows3.1”</code>中的<code>“Windows”</code>。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。 |<br> | <code>(?!pattern)</code> | 负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。 |<br> | 例如<code>“Windows(?!95 | 98 | NT | 2000)”</code>能匹配<code>“Windows3.1”</code>中的<code>“Windows”</code>，但不能匹配<code>“Windows2000”</code>中的<code>“Windows”</code>。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始 |<br> | <code>x | y</code> | 匹配 x 或 y。 |<br> | 例如：<code>“z | food”</code>能匹配<code>“z”</code>或<code>“food”</code>。<code>“(z | f)ood”</code>则匹配<code>“zood”</code>或<code>“food”</code>。 |<br> | <code>[xyz]</code> | 字符集合。匹配所包含的任意一个字符。 |<br> | 例如：<code>“[abc]”</code>可以匹配<code>“plain”</code>中的<code>“a”</code>。 |<br> | <code>[^xyz]</code> | 负值字符集合。匹配未包含的任意字符。 |<br> | 例如：<code>“[^abc]”</code>可以匹配<code>“plain”</code>中的<code>“p”</code>。 |<br> | <code>[a-z]</code> | 字符范围。匹配指定范围内的任意字符。 |<br> | 例如：<code>“[a-z]”</code>可以匹配<code>“a”</code>到<code>“z”</code>范围内的任意小写字母字符。 |<br> | <code>[^a-z]</code> | 负值字符范围。匹配任何不在指定范围内的任意字符。 |<br> | 例如：<code>“[^a-z]”</code>可以匹配任何不在<code>“a”</code>到<code>“z”</code>范围内的任意字符。 |<br> | <code>\\b</code> | 匹配一个单词边界，也就是指单词和空格间的位置。 |<br> | 例如：<code>“er\\b”</code>可以匹配<code>“never”</code>中的<code>“er”</code>，但不能匹配<code>“verb”</code>中的<code>“er”</code>。 |<br> | <code>\\B</code> | 匹配非单词边界。<code>“er\\B</code>”能匹配<code>“verb”</code>中的<code>“er”</code>，但不能匹配<code>“never”</code>中的<code>“er”</code>。 |<br> | <code>\\cx</code> | 匹配由 <code>x</code> 指明的控制字符。 |<br> | 例如：<code>\\cM</code> 匹配一个 <code>Control-M</code> 或回车符。<code>x</code> 的值必须为 <code>A-Z</code> 或 <code>a-z</code> 之一。否则，将 <code>c</code> 视为一个原义的<code>“c”</code>字符。 |<br> | <code>\\d</code> | 匹配一个数字字符。等价于<code>[0-9]</code>。 |<br> | <code>\\D</code> | 匹配一个非数字字符。等价于<code>[^0-9]</code>。 |<br> | <code>\\f</code> | 匹配一个换页符。等价于<code>\\x0c</code> 和<code>\\cL</code>。 |<br> | <code>\\n</code> | 匹配一个换行符。等价于<code>\\x0a</code> 和<code>\\cJ</code>。 |<br> | <code>\\r</code> | 匹配一个回车符。等价于<code>\\x0d</code> 和<code>\\cM</code>。 |<br> | <code>\\s</code> | 匹配任何空白字符，包括空格、制表符、换页符等等。等价于<code>[\\f\\n\\r\\t\\v]</code>。 |<br> | <code>\\S</code> | 匹配任何非空白字符。等价于<code>[^\\f\\n\\r\\t\\v]</code>。 |<br> | <code>\\t</code> | 匹配一个制表符。等价于<code>\\x09</code> 和<code>\\cI</code>。 |<br> | <code>\\v</code> | 匹配一个垂直制表符。等价于<code>\\x0b</code> 和<code>\\cK</code>。 |<br> | <code>\\w</code> | 匹配包括下划线的任何单词字符。等价于<code>“[A-Za-z0-9_]”</code>。 |<br> | <code>\\W</code> | 匹配任何非单词字符。等价于<code>“[^a-za-z0-9_]”</code>。 |<br> | <code>\\xn</code> | 匹配 <code>n</code>，其中 <code>n</code> 为十六进制转义值。十六进制转义值必须为确定的两个数字长。 |<br> | 例如：<code>“\\x41”</code>匹配<code>“A”</code>。<code>“\\x041”</code>则等价于<code>“\\x04&amp;1”</code>。正则表达式中可以使用 <code>ASCII</code> 编码。. |<br> | <code>\\num</code> | 匹配 <code>num</code>，其中 <code>num</code> 是一个正整数。对所获取的匹配的引用。 |<br> | 例如：<code>“(.)\\1”</code>匹配两个连续的相同字符。 |<br> | <code>\\n</code> | 标识一个八进制转义值或一个向后引用。如果<code>\\n</code> 之前至少 <code>n</code> 个获取的子表达式，则 <code>n</code> 为向后引用。否则，如果 <code>n</code> 为八进制数字<code>（0-7）</code>，则 <code>n</code> 为一个八进制转义值。 |<br> | <code>\\nm</code> | 标识一个八进制转义值或一个向后引用。如果<code>\\nm</code> 之前至少有 <code>nm</code> 个获得子表达式，则 <code>nm</code> 为向后引用。如果<code>\\nm</code> 之前至少有 <code>n</code> 个获取，则 <code>n</code> 为一个后跟文字 <code>m</code> 的向后引用。如果前面的条件都不满足，若 <code>n</code> 和 <code>m</code> 均为八进制数字<code>（0-7）</code>，则<code>\\nm</code> 将匹配八进制转义值 <code>nm</code>。 |<br> | <code>\\nml</code> | 如果 <code>n</code> 为八进制数字<code>（0-3）</code>，且 <code>m</code> 和 <code>l</code> 均为八进制数字<code>（0-7）</code>，则匹配八进制转义值 <code>nml</code>。 |<br> | <code>\\un</code> | 匹配 <code>n</code>，其中 <code>n</code> 是一个用四个十六进制数字表示的 <code>Unicode</code> 字符。 |<br> | 例如：<code>\\u00A9</code> 匹配版权符号<code>（?）</code>。 |</p><h2 id="文本处理工具" tabindex="-1"><a class="header-anchor" href="#文本处理工具" aria-hidden="true">#</a> 文本处理工具</h2><h2 id="cut-命令" tabindex="-1"><a class="header-anchor" href="#cut-命令" aria-hidden="true">#</a> cut 命令</h2><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cut</span>  <span class="token punctuation">[</span>-bn<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>
<span class="token function">cut</span> <span class="token punctuation">[</span>-c<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>
<span class="token function">cut</span> <span class="token punctuation">[</span>-df<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用说明:</strong></p><p>cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。</p><p>如果不指定 File 参数，cut 命令将读取标准输入。必须指定 -b、-c 或 -f 标志之一。</p><p><strong>参数:</strong></p><ul><li>-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。</li><li>-c ：以字符为单位进行分割。</li><li>-d ：自定义分隔符，默认为制表符。</li><li>-f ：与-d 一起使用，指定显示哪个区域。</li><li>-n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的 范围之内，该字符将被写出；否则，该字符将被排除</li></ul><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h3><p>当你执行 who 命令时，会输出类似如下的内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">who</span>
rocrocket :0           <span class="token number">2009</span>-01-08 <span class="token number">11</span>:07
rocrocket pts/0        <span class="token number">2009</span>-01-08 <span class="token number">11</span>:23 <span class="token punctuation">(</span>:0.0<span class="token punctuation">)</span>
rocrocket pts/1        <span class="token number">2009</span>-01-08 <span class="token number">14</span>:15 <span class="token punctuation">(</span>:0.0<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们想提取每一行的第 3 个字节，就这样：</p><h2 id="awk-命令" tabindex="-1"><a class="header-anchor" href="#awk-命令" aria-hidden="true">#</a> awk 命令</h2><h3 id="语法-1" tabindex="-1"><a class="header-anchor" href="#语法-1" aria-hidden="true">#</a> 语法</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token punctuation">[</span>选项参数<span class="token punctuation">]</span> <span class="token string">&#39;script&#39;</span> <span class="token assign-left variable">var</span><span class="token operator">=</span>value file<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
或
<span class="token function">awk</span> <span class="token punctuation">[</span>选项参数<span class="token punctuation">]</span> <span class="token parameter variable">-f</span> scriptfile <span class="token assign-left variable">var</span><span class="token operator">=</span>value file<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>选项参数说明：</strong></p><ul><li><code>-F fs or --field-separator fs</code> 指定输入文件折分隔符，fs 是一个字符串或者是一个正则表达式，如-F:。</li><li><code>-v var=value or --asign var=value</code> 赋值一个用户定义变量。</li><li><code>-f scripfile or --file scriptfile</code> 从脚本文件中读取<code>awk</code>命令。</li><li><code>-mf nnn and -mr nnn</code> 对<code>nnn</code>值设置内在限制，<code>-mf</code>选项限制分配给<code>nnn</code>的最大块数目；<code>-mr</code>选项限制记录的最大数目。这两个功能是 Bell 实验室版<code>awk</code>的扩展功能，在标准<code>awk</code>中不适用。</li><li><code>-W compact or --compat, -W traditional or --traditional</code> 在兼容模式下运行<code>awk</code>。所以<code>gawk</code>的行为和标准的<code>awk</code>完全一样，所有的<code>awk</code>扩展都被忽略。</li><li><code>-W copyleft or --copyleft, -W copyright or --copyright</code> 打印简短的版权信息。</li><li><code>-W help or --help, -W usage or --usage</code> 打印全部<code>awk</code>选项和每个选项的简短说明。</li><li><code>-W lint or --lint</code> 打印不能向传统<code>unix</code>平台移植的结构的警告。</li><li><code>-W lint-old or --lint-old</code> 打印关于不能向传统<code>unix</code>平台移植的结构的警告。</li><li><code>-W posix</code> 打开兼容模式。但有以下限制，不识别：/x、函数关键字、<code>func</code>、换码序列以及当<code>fs</code>是一个空格时，将新行作为一个域分隔符；操作符<strong>和</strong>=不能代替<sup>和</sup>=；<code>fflush</code>无效。</li><li><code>-W re-interval or --re-inerval</code> 允许间隔正则表达式的使用，参考(<code>grep</code>中的<code>Posix</code>字符类)，如括号表达式<code>[[:alpha:]]</code>。</li><li><code>-W source program-text or --source program-text</code> 使用 p<code>rogram-text</code>作为源代码，可与-f 命令混用。</li><li><code>-W version or --version</code> 打印 bug 报告信息的版本。</li></ul><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h3><p>log.txt 文本内容如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">2</span> this is a <span class="token builtin class-name">test</span>
<span class="token number">3</span> Do you like <span class="token function">awk</span>
This&#39;s a <span class="token builtin class-name">test</span>
<span class="token number">10</span> There are orange,apple,mongo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用法一：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;{[pattern] action}&#39;</span> <span class="token punctuation">{</span>filenames<span class="token punctuation">}</span>   <span class="token comment"># 行匹配语句 awk &#39;&#39; 只能用单引号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 每行按空格或TAB分割，输出文本中的1、4项</span>
 $ <span class="token function">awk</span> <span class="token string">&#39;{print $1,$4}&#39;</span> log.txt
 ---------------------------------------------
 <span class="token number">2</span> a
 <span class="token number">3</span> like
 This<span class="token string">&#39;s
 10 orange,apple,mongo
 # 格式化输出
 $ awk &#39;</span><span class="token punctuation">{</span>printf <span class="token string">&quot;%-8s %-10s<span class="token entity" title="\\n">\\n</span>&quot;</span>,<span class="token variable">$1</span>,<span class="token variable">$4</span><span class="token punctuation">}</span><span class="token string">&#39; log.txt
 ---------------------------------------------
 2        a
 3        like
 This&#39;</span>s
 <span class="token number">10</span>       orange,apple,mongo

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用法二：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token parameter variable">-F</span>  <span class="token comment">#-F相当于内置变量FS, 指定分割字符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 使用&quot;,&quot;分割</span>
 $  <span class="token function">awk</span> -F, <span class="token string">&#39;{print $1,$2}&#39;</span>   log.txt
 ---------------------------------------------
 <span class="token number">2</span> this is a <span class="token builtin class-name">test</span>
 <span class="token number">3</span> Do you like <span class="token function">awk</span>
 This<span class="token string">&#39;s a test
 10 There are orange apple
 # 或者使用内建变量
 $ awk &#39;</span>BEGIN<span class="token punctuation">{</span>FS<span class="token operator">=</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>print <span class="token variable">$1</span>,<span class="token variable">$2</span><span class="token punctuation">}</span><span class="token string">&#39;     log.txt
 ---------------------------------------------
 2 this is a test
 3 Do you like awk
 This&#39;</span>s a <span class="token builtin class-name">test</span>
 <span class="token number">10</span> There are orange apple
 <span class="token comment"># 使用多个分隔符.先使用空格分割，然后对分割结果再使用&quot;,&quot;分割</span>
 $ <span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">&#39;[ ,]&#39;</span>  <span class="token string">&#39;{print $1,$2,$5}&#39;</span>   log.txt
 ---------------------------------------------
 <span class="token number">2</span> this <span class="token builtin class-name">test</span>
 <span class="token number">3</span> Are <span class="token function">awk</span>
 This&#39;s a
 <span class="token number">10</span> There apple
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用法三：</p><p>实例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ <span class="token function">awk</span> <span class="token parameter variable">-va</span><span class="token operator">=</span><span class="token number">1</span> <span class="token string">&#39;{print $1,$1+a}&#39;</span> log.txt
 ---------------------------------------------
 <span class="token number">2</span> <span class="token number">3</span>
 <span class="token number">3</span> <span class="token number">4</span>
 This<span class="token string">&#39;s 1
 10 11
 $ awk -va=1 -vb=s &#39;</span><span class="token punctuation">{</span>print <span class="token variable">$1</span>,<span class="token variable">$1</span>+a,<span class="token variable">$1b</span><span class="token punctuation">}</span><span class="token string">&#39; log.txt
 ---------------------------------------------
 2 3 2s
 3 4 3s
 This&#39;</span>s <span class="token number">1</span> This&#39;ss
 <span class="token number">10</span> <span class="token number">11</span> 10s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用法四：</p><p>实例：</p><h3 id="运算符-1" tabindex="-1"><a class="header-anchor" href="#运算符-1" aria-hidden="true">#</a> 运算符</h3><p>| 运算符 | 描述 |<br> | --------------------------- | -------------------------------- | --- | ------ |<br> | = += -= *= /= %= ^= **= | 赋值 |<br> | ?: | C 条件表达式 |<br> | | | | 逻辑或 |<br> | &amp;&amp; | 逻辑与 |<br> | ~ 和 !~ | 匹配正则表达式和不匹配正则表达式 |<br> | &lt; &lt;= &gt; &gt;= != == | 关系运算符 |<br> | 空格 | 连接 |<br> | + - | 加，减 |<br> | * / % | 乘，除与求余 |<br> | + - ! | 一元加，减和逻辑非 |<br> | ^ *** | 求幂 |<br> | ++ -- | 增加或减少，作为前缀或后缀 |<br> | $ | 字段引用 |<br> | in | 数组成员 |</p><p>过滤第一列大于 2 的行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">awk</span> <span class="token string">&#39;$1&gt;2&#39;</span> log.txt    <span class="token comment">#命令</span>
<span class="token comment">#输出</span>
<span class="token number">3</span> Do you like <span class="token function">awk</span>
This&#39;s a <span class="token builtin class-name">test</span>
<span class="token number">10</span> There are orange,apple,mongo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>过滤第一列等于 2 的行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">awk</span> <span class="token string">&#39;$1==2 {print $1,$3}&#39;</span> log.txt    <span class="token comment">#命令</span>
<span class="token comment">#输出</span>
<span class="token number">2</span> is
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>过滤第一列大于 2 并且第二列等于&#39;Are&#39;的行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">awk</span> <span class="token string">&#39;$1&gt;2 &amp;&amp; $2==&quot;Are&quot; {print $1,$2,$3}&#39;</span> log.txt    <span class="token comment">#命令</span>
<span class="token comment">#输出</span>
<span class="token number">3</span> Are you
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="内建变量" tabindex="-1"><a class="header-anchor" href="#内建变量" aria-hidden="true">#</a> 内建变量</h3><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>$n</code></td><td>当前记录的第 n 个字段，字段间由<code>FS</code>分隔</td></tr><tr><td><code>$0</code></td><td>完整的输入记录</td></tr><tr><td><code>ARGC</code></td><td>命令行参数的数目</td></tr><tr><td><code>ARGIND</code></td><td>命令行中当前文件的位置(从 0 开始算)</td></tr><tr><td><code>ARGV</code></td><td>包含命令行参数的数组</td></tr><tr><td><code>CONVFMT</code></td><td>数字转换格式(默认值为<code>%.6g</code>)<code>ENVIRON</code>环境变量关联数组</td></tr><tr><td><code>ERRNO</code></td><td>最后一个系统错误的描述</td></tr><tr><td><code>FIELDWIDTHS</code></td><td>字段宽度列表(用空格键分隔)</td></tr><tr><td><code>FILENAME</code></td><td>当前文件名</td></tr><tr><td><code>FNR</code></td><td>各文件分别计数的行号</td></tr><tr><td><code>FS</code></td><td>字段分隔符(默认是任何空格)</td></tr><tr><td><code>IGNORECASE</code></td><td>如果为真，则进行忽略大小写的匹配</td></tr><tr><td><code>NF</code></td><td>一条记录的字段的数目</td></tr><tr><td><code>NR</code></td><td>已经读出的记录数，就是行号，从 1 开始</td></tr><tr><td><code>OFMT</code></td><td>数字的输出格式(默认值是<code>%.6g)</code></td></tr><tr><td><code>OFS</code></td><td>输出字段分隔符，默认值与输入字段分隔符一致。</td></tr><tr><td><code>ORS</code></td><td>输出记录分隔符(默认值是一个换行符)</td></tr><tr><td><code>RLENGTH</code></td><td>由<code>match</code>函数所匹配的字符串的长度</td></tr><tr><td><code>RS</code></td><td>记录分隔符(默认是一个换行符)</td></tr><tr><td><code>RSTART</code></td><td>由<code>match</code>函数所匹配的字符串的第一个位置</td></tr><tr><td><code>SUBSEP</code></td><td>数组下标分隔符(默认值是<code>/034</code>)</td></tr></tbody></table><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">awk</span> <span class="token string">&#39;BEGIN{printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n&quot;,&quot;FILENAME&quot;,&quot;ARGC&quot;,&quot;FNR&quot;,&quot;FS&quot;,&quot;NF&quot;,&quot;NR&quot;,&quot;OFS&quot;,&quot;ORS&quot;,&quot;RS&quot;;printf &quot;---------------------------------------------\\n&quot;} {printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n&quot;,FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS}&#39;</span>  log.txt
FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS
---------------------------------------------
log.txt    <span class="token number">2</span>    <span class="token number">1</span>         <span class="token number">5</span>    <span class="token number">1</span>
log.txt    <span class="token number">2</span>    <span class="token number">2</span>         <span class="token number">5</span>    <span class="token number">2</span>
log.txt    <span class="token number">2</span>    <span class="token number">3</span>         <span class="token number">3</span>    <span class="token number">3</span>
log.txt    <span class="token number">2</span>    <span class="token number">4</span>         <span class="token number">4</span>    <span class="token number">4</span>
$ <span class="token function">awk</span> -F<span class="token punctuation">\\</span>&#39; <span class="token string">&#39;BEGIN{printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n&quot;,&quot;FILENAME&quot;,&quot;ARGC&quot;,&quot;FNR&quot;,&quot;FS&quot;,&quot;NF&quot;,&quot;NR&quot;,&quot;OFS&quot;,&quot;ORS&quot;,&quot;RS&quot;;printf &quot;---------------------------------------------\\n&quot;} {printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n&quot;,FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS}&#39;</span>  log.txt
FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS
---------------------------------------------
log.txt    <span class="token number">2</span>    <span class="token number">1</span>    <span class="token string">&#39;    1    1
log.txt    2    2    &#39;</span>    <span class="token number">1</span>    <span class="token number">2</span>
log.txt    <span class="token number">2</span>    <span class="token number">3</span>    <span class="token string">&#39;    2    3
log.txt    2    4    &#39;</span>    <span class="token number">1</span>    <span class="token number">4</span>
<span class="token comment"># 输出顺序号 NR, 匹配文本行号</span>
$ <span class="token function">awk</span> <span class="token string">&#39;{print NR,FNR,$1,$2,$3}&#39;</span> log.txt
---------------------------------------------
<span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> this is
<span class="token number">2</span> <span class="token number">2</span> <span class="token number">3</span> Are you
<span class="token number">3</span> <span class="token number">3</span> This<span class="token string">&#39;s a test
4 4 10 There are
# 指定输出分割符
$  awk &#39;</span><span class="token punctuation">{</span>print <span class="token variable">$1</span>,<span class="token variable">$2</span>,<span class="token variable">$5</span><span class="token punctuation">}</span><span class="token string">&#39; OFS=&quot; $ &quot;  log.txt
---------------------------------------------
2 $ this $ test
3 $ Are $ awk
This&#39;</span>s $ a $
<span class="token number">10</span> $ There $
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="使用正则-字符串匹配" tabindex="-1"><a class="header-anchor" href="#使用正则-字符串匹配" aria-hidden="true">#</a> 使用正则，字符串匹配</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 输出第二列包含 &quot;th&quot;，并打印第二列与第四列</span>
$ <span class="token function">awk</span> <span class="token string">&#39;$2 ~ /th/ {print $2,$4}&#39;</span> log.txt
---------------------------------------------
this a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>~ 表示模式开始。// 中是模式。</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 输出包含 &quot;re&quot; 的行</span>
$ <span class="token function">awk</span> <span class="token string">&#39;/re/ &#39;</span> log.txt
---------------------------------------------
<span class="token number">3</span> Do you like <span class="token function">awk</span>
<span class="token number">10</span> There are orange,apple,mongo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="忽略大小写" tabindex="-1"><a class="header-anchor" href="#忽略大小写" aria-hidden="true">#</a> 忽略大小写</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">awk</span> <span class="token string">&#39;BEGIN{IGNORECASE=1} /this/&#39;</span> log.txt
---------------------------------------------
<span class="token number">2</span> this is a <span class="token builtin class-name">test</span>
This&#39;s a <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="模式取反" tabindex="-1"><a class="header-anchor" href="#模式取反" aria-hidden="true">#</a> 模式取反</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">awk</span> <span class="token string">&#39;$2 !~ /th/ {print $2,$4}&#39;</span> log.txt
---------------------------------------------
Are like
a
There orange,apple,mongo
$ <span class="token function">awk</span> <span class="token string">&#39;!/th/ {print $2,$4}&#39;</span> log.txt
---------------------------------------------
Are like
a
There orange,apple,mongo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="awk-脚本" tabindex="-1"><a class="header-anchor" href="#awk-脚本" aria-hidden="true">#</a> awk 脚本</h3><p>关于 awk 脚本，我们需要注意两个关键词 BEGIN 和 END。</p>`,130),K=s("ul",null,[s("li",{这里面放的是执行前的语句:""},"BEGIN"),s("li",{这里面放的是处理完所有的行后要执行的语句:""},"END"),s("li",{这里面放的是处理每一行时要执行的语句:""})],-1),Y=a(`<p>假设有这么一个文件（学生成绩表）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> score.txt
Marry   <span class="token number">2143</span> <span class="token number">78</span> <span class="token number">84</span> <span class="token number">77</span>
Jack    <span class="token number">2321</span> <span class="token number">66</span> <span class="token number">78</span> <span class="token number">45</span>
Tom     <span class="token number">2122</span> <span class="token number">48</span> <span class="token number">77</span> <span class="token number">71</span>
Mike    <span class="token number">2537</span> <span class="token number">87</span> <span class="token number">97</span> <span class="token number">95</span>
Bob     <span class="token number">2415</span> <span class="token number">40</span> <span class="token number">57</span> <span class="token number">62</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的 awk 脚本如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> cal.awk
<span class="token comment">#!/bin/awk -f</span>
<span class="token comment">#运行前</span>
BEGIN <span class="token punctuation">{</span>
    math <span class="token operator">=</span> <span class="token number">0</span>
    english <span class="token operator">=</span> <span class="token number">0</span>
    computer <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token builtin class-name">printf</span> <span class="token string">&quot;NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL<span class="token entity" title="\\n">\\n</span>&quot;</span>
    <span class="token builtin class-name">printf</span> <span class="token string">&quot;---------------------------------------------<span class="token entity" title="\\n">\\n</span>&quot;</span>
<span class="token punctuation">}</span>
<span class="token comment">#运行中</span>
<span class="token punctuation">{</span>
    <span class="token assign-left variable">math</span><span class="token operator">+=</span><span class="token variable">$3</span>
    <span class="token assign-left variable">english</span><span class="token operator">+=</span><span class="token variable">$4</span>
    <span class="token assign-left variable">computer</span><span class="token operator">+=</span><span class="token variable">$5</span>
    <span class="token builtin class-name">printf</span> <span class="token string">&quot;%-6s %-6s %4d %8d %8d %8d<span class="token entity" title="\\n">\\n</span>&quot;</span>, <span class="token variable">$1</span>, <span class="token variable">$2</span>, <span class="token variable">$3</span>,<span class="token variable">$4</span>,<span class="token variable">$5</span>, <span class="token variable">$3</span>+<span class="token variable">$4</span>+<span class="token variable">$5</span>
<span class="token punctuation">}</span>
<span class="token comment">#运行后</span>
END <span class="token punctuation">{</span>
    <span class="token builtin class-name">printf</span> <span class="token string">&quot;---------------------------------------------<span class="token entity" title="\\n">\\n</span>&quot;</span>
    <span class="token builtin class-name">printf</span> <span class="token string">&quot;  TOTAL:%10d %8d %8d <span class="token entity" title="\\n">\\n</span>&quot;</span>, math, english, computer
    <span class="token builtin class-name">printf</span> <span class="token string">&quot;AVERAGE:%10.2f %8.2f %8.2f<span class="token entity" title="\\n">\\n</span>&quot;</span>, math/NR, english/NR, computer/NR
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来看一下执行结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">awk</span> <span class="token parameter variable">-f</span> cal.awk score.txt
NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL
---------------------------------------------
Marry  <span class="token number">2143</span>     <span class="token number">78</span>       <span class="token number">84</span>       <span class="token number">77</span>      <span class="token number">239</span>
Jack   <span class="token number">2321</span>     <span class="token number">66</span>       <span class="token number">78</span>       <span class="token number">45</span>      <span class="token number">189</span>
Tom    <span class="token number">2122</span>     <span class="token number">48</span>       <span class="token number">77</span>       <span class="token number">71</span>      <span class="token number">196</span>
Mike   <span class="token number">2537</span>     <span class="token number">87</span>       <span class="token number">97</span>       <span class="token number">95</span>      <span class="token number">279</span>
Bob    <span class="token number">2415</span>     <span class="token number">40</span>       <span class="token number">57</span>       <span class="token number">62</span>      <span class="token number">159</span>
---------------------------------------------
  TOTAL:       <span class="token number">319</span>      <span class="token number">393</span>      <span class="token number">350</span>
AVERAGE:     <span class="token number">63.80</span>    <span class="token number">78.60</span>    <span class="token number">70.00</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="另外一些实例" tabindex="-1"><a class="header-anchor" href="#另外一些实例" aria-hidden="true">#</a> 另外一些实例</h3><p>AWK 的 hello world 程序为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>BEGIN <span class="token punctuation">{</span> print <span class="token string">&quot;Hello, world!&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>计算文件大小</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ls</span> <span class="token parameter variable">-l</span> *.txt <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{sum+=$5} END {print sum}&#39;</span>
--------------------------------------------------
<span class="token number">666581</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从文件中找出长度大于 80 的行：</p><p>打印九九乘法表</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">seq</span> <span class="token number">9</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;H;g&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-v</span> <span class="token assign-left variable">RS</span><span class="token operator">=</span><span class="token string">&#39;&#39;</span> <span class="token string">&#39;{for(i=1;i&lt;=NF;i++)printf(&quot;%dx%d=%d%s&quot;, i, NR, i*NR, i==NR?&quot;\\n&quot;:&quot;\\t&quot;)}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="发送消息案例" tabindex="-1"><a class="header-anchor" href="#发送消息案例" aria-hidden="true">#</a> 发送消息案例</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/zsh</span>

<span class="token comment"># 查看用户是否登录</span>
<span class="token assign-left variable">login_user</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">who</span> <span class="token operator">|</span>  <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-m</span> <span class="token number">1</span> $1 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{ print $1}&#39;</span><span class="token variable">)</span></span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$login_user</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
 <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$1</span> 不在线&quot;</span>
 <span class="token builtin class-name">echo</span> “脚本退出”
 <span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>

<span class="token comment"># 查看用户是否开启了消息功能</span>
<span class="token assign-left variable">is_allowwed</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">who</span> <span class="token operator">|</span>  <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-m</span> <span class="token number">1</span> $1 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{ print $1}&#39;</span><span class="token variable">)</span></span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$is_allowwed</span> <span class="token operator">!=</span> <span class="token string">&#39;+&#39;</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
 <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$1</span> 没有开启消息功能&quot;</span>
 <span class="token builtin class-name">echo</span> “脚本退出”
 <span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>

<span class="token comment"># 确认是否消息发送</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$2</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
 <span class="token builtin class-name">echo</span> <span class="token string">&quot;没有消息发送&quot;</span>
 <span class="token builtin class-name">echo</span> “脚本退出”
 <span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>

<span class="token comment"># 从参数中获取要发送的消息</span>
<span class="token assign-left variable">whole_msg</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $* <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">&quot; &quot;</span> <span class="token parameter variable">-f</span> <span class="token number">2</span>-<span class="token variable">)</span></span>

<span class="token comment"># 获取用户登录的终端</span>
<span class="token assign-left variable">user_terminal</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">who</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-m</span> <span class="token number">1</span> $1 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $2}&#39;</span><span class="token variable">)</span></span>

<span class="token comment"># 写入发送的消息</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$whole_msg</span> <span class="token operator">|</span> <span class="token function">write</span> <span class="token variable">$login_user</span> <span class="token variable">$user_terminal</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
 <span class="token builtin class-name">echo</span> <span class="token string">&quot;发送失败“
else
 echo &quot;</span>发送成功&quot;
<span class="token keyword">fi</span>
<span class="token builtin class-name">exit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function ss(ns,as){const l=c("ExternalLinkIcon");return e(),t("div",null,[d,s("p",null,[n("在 "),s("a",r,[n("helloworld.sh"),o(l)]),n(" 中输入如下内容")]),u,s("p",null,[n("常用系统变量 "),s("mjx-container",v,[(e(),t("svg",b,k)),h]),n("PWD、"),s("mjx-container",g,[(e(),t("svg",Q,T)),$]),n("USER...")]),w,s("h3",x,[y,n(),s("mjx-container",q,[(e(),t("svg",_,M)),L]),n("@")]),N,s("p",null,[n("判断 "),s("a",S,[n("helloworld.sh"),o(l)]),n(" 脚本是否正确执")]),R,s("blockquote",null,[s("p",null,[n("**注意：**条件表达式要放在方括号之间，并且要有空格，例如: "),s("strong",null,[n("["),s("mjx-container",A,[(e(),t("svg",D,E)),Z]),n("b]")]),n(" 是错误的，必须写成 "),V,n("。")])]),z,s("p",null,[n("| 运算符 | 说明 | 举例 |"),I,n(" | ------ | ---------- | ------------------------------------------- | --------- | -------------- | --- | ------------------------ |"),B,n(" | && | 逻辑的 AND | [[$a -lt 100 && "),s("mjx-container",C,[(e(),t("svg",O,W)),j]),n("a -lt 100 | | $b -gt 100]] 返回 true |")]),P,s("p",null,[n("以上实例使用了 "),J,n(" 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量，具体可查阅："),s("a",U,[n("Bash let 命令 open in new window"),o(l)]),n("。")]),X,K,Y])}const ts=i(p,[["render",ss],["__file","shell.html.vue"]]);export{ts as default};
