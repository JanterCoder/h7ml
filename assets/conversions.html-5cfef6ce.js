const t=JSON.parse('{"key":"v-20cb8dae","path":"/posts/javascript/conversions.html","title":"JavaScript 类型转换","lang":"zh-CN","frontmatter":{"icon":"javascript","order":1,"date":"2019-08-16T00:00:00.000Z","author":"h7ml","category":"javascript","tag":"javascript","star":true,"description":"JavaScript 类型转换 温馨提示阅读[《你不知道的 JavaScript（中卷）》](https://www.ituring.com.cn/book/1563)和各个大佬的文章所归纳的总结，**如有异议按你的理解为主** ::: 将值从一种类型转换为另一种类型称为类型转换 在 JavaScript 中进行类型转换时，根据调用形式的不同可以分为以下两种: 显式类型转换 隐式类型转换 抽象操作 (内部的类型转换规则) 在了解类型转换前我们需要知道 JavaScript 的 抽象操作 (类型转换规则) 抽象操作 是指仅供内部使用的操作 ToPrimitive 将引用类型转换成相应的基本类型值 ToString 将非字符串值转换成字符串 ToBoolean 将非布尔值转换成布尔值 ToNumber 将非数字值转换成数字值 ToPrimitive ToPrimitive 用来处理引用类型到基本类型的类型转换 ToPrimitive 转换规则 检查是否存在 Symbol.toPrimitive() 基本类型直接返回 引用类型抛出 TypeError 错误 检查是否存在 valueOf() 基本类型直接返回 引用类型则继续调用 toString() 调用 toString() 基本类型直接返回 引用类型抛出 TypeError 错误","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/javascript/conversions.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/javascript/conversions.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"JavaScript 类型转换"}],["meta",{"property":"og:description","content":"JavaScript 类型转换 温馨提示阅读[《你不知道的 JavaScript（中卷）》](https://www.ituring.com.cn/book/1563)和各个大佬的文章所归纳的总结，**如有异议按你的理解为主** ::: 将值从一种类型转换为另一种类型称为类型转换 在 JavaScript 中进行类型转换时，根据调用形式的不同可以分为以下两种: 显式类型转换 隐式类型转换 抽象操作 (内部的类型转换规则) 在了解类型转换前我们需要知道 JavaScript 的 抽象操作 (类型转换规则) 抽象操作 是指仅供内部使用的操作 ToPrimitive 将引用类型转换成相应的基本类型值 ToString 将非字符串值转换成字符串 ToBoolean 将非布尔值转换成布尔值 ToNumber 将非数字值转换成数字值 ToPrimitive ToPrimitive 用来处理引用类型到基本类型的类型转换 ToPrimitive 转换规则 检查是否存在 Symbol.toPrimitive() 基本类型直接返回 引用类型抛出 TypeError 错误 检查是否存在 valueOf() 基本类型直接返回 引用类型则继续调用 toString() 调用 toString() 基本类型直接返回 引用类型抛出 TypeError 错误"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:published_time","content":"2019-08-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript 类型转换\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-08-16T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":3,"title":"ToString","slug":"tostring","link":"#tostring","children":[]},{"level":3,"title":"ToBoolean","slug":"toboolean","link":"#toboolean","children":[]},{"level":3,"title":"ToNumber","slug":"tonumber","link":"#tonumber","children":[]},{"level":2,"title":"显式类型转换","slug":"显式类型转换","link":"#显式类型转换","children":[]},{"level":2,"title":"隐式类型转换","slug":"隐式类型转换","link":"#隐式类型转换","children":[]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":4.67,"words":1400},"filePathRelative":"posts/javascript/conversions.md","localizedDate":"2019年8月16日","excerpt":"<h1> JavaScript 类型转换</h1>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">温馨提示阅读[《你不知道的 JavaScript（中卷）》](https://www.ituring.com.cn/book/1563)和各个大佬的文章所归纳的总结，**如有异议按你的理解为主** :::</p>\\n<p>将值从一种类型转换为另一种类型称为<strong>类型转换</strong> <br> 在 <code>JavaScript</code> 中进行类型转换时，根据调用形式的不同可以分为以下两种:</p>\\n<ul>\\n<li><strong>显式类型转换</strong></li>\\n<li><strong>隐式类型转换</strong></li>\\n</ul>\\n<h2> 抽象操作 (内部的类型转换规则)</h2>\\n<p>在了解类型转换前我们需要知道 <code>JavaScript</code> 的 <strong>抽象操作</strong> (类型转换规则)</p>\\n<blockquote>\\n<p><strong>抽象操作</strong> 是指仅供内部使用的操作</p>\\n</blockquote>\\n<ul>\\n<li><code>ToPrimitive</code> 将引用类型转换成相应的基本类型值</li>\\n<li><code>ToString</code> 将非字符串值转换成字符串</li>\\n<li><code>ToBoolean</code> 将非布尔值转换成布尔值</li>\\n<li><code>ToNumber</code> 将非数字值转换成数字值</li>\\n</ul>\\n<h3> ToPrimitive</h3>\\n<p><code>ToPrimitive</code> 用来处理引用类型到基本类型的类型转换</p>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">ToPrimitive 转换规则</p>\\n<ul>\\n<li>检查是否存在 <code>Symbol.toPrimitive()</code>\\n<ul>\\n<li>基本类型直接返回</li>\\n<li>引用类型抛出 <code>TypeError</code> 错误</li>\\n</ul>\\n</li>\\n<li>检查是否存在 <code>valueOf()</code>\\n<ul>\\n<li>基本类型直接返回</li>\\n<li>引用类型则继续调用 <code>toString()</code></li>\\n</ul>\\n</li>\\n<li>调用 <code>toString()</code>\\n<ul>\\n<li>基本类型直接返回</li>\\n<li>引用类型抛出 <code>TypeError</code> 错误</li>\\n</ul>\\n</li>\\n</ul>\\n</div>\\n</div>","autoDesc":true}');export{t as data};
