import{_ as n,o as s,c as a,f as t}from"./app-2a9bb723.js";const e={},p=t(`<h1 id="javascript-es6-generator-函数" tabindex="-1"><a class="header-anchor" href="#javascript-es6-generator-函数" aria-hidden="true">#</a> JavaScript ES6 Generator 函数</h1><ul><li>执行机制</li></ul><ol><li>function 后加 *，函数执行后返回 Iterator 对象</li><li>返回的对象调用 next 方法开始执行，遇到 yield 关键字会停止。</li><li>再次调用 next 方法会从上一次的结束的地方继续执行，直到 yield</li><li>yield 后面的值会在 next 执行停止时返回</li><li>next 传的参数会在函数内传给 yield</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">fnc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开始&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token string">&#39;返回给next&#39;</span><span class="token punctuation">;</span> <span class="token comment">// next 没有传参 a 默认 undefined</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">&#39;结束&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// next传入 &#39;结束&#39;</span>
  <span class="token keyword">return</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token function">fnc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
f<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;next传入&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {value: &quot;返回给 next&quot;, done: false}</span>
f<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {value: undefined, done: true}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","Generator.html.vue"]]);export{r as default};
