const n=JSON.parse(`{"key":"v-f8200acc","path":"/posts/vue/proxy-observe.html","title":"proxy-observe 核心代码 自定义实现","lang":"zh-CN","frontmatter":{"icon":"vue","order":1,"date":"2021-06-27T00:00:00.000Z","author":"h7ml","category":"vue","tag":"vue","star":true,"description":"proxy-observe 核心代码 自定义实现 // 创建响应式 function reactive(target = {}) { if (typeof target !== 'object' || target == null) { // 不是对象或数组，则返回 return target; } // 代理配置 const proxyConf = { get(target, key, receiver) { // 只处理本身（非原型的）属性 const ownKeys = Reflect.ownKeys(target); if (ownKeys.includes(key)) { console.log('get', key); // 监听 } const result = Reflect.get(target, key, receiver); // 深度监听 // 性能如何提升的？ return reactive(result); }, set(target, key, val, receiver) { // 重复的数据，不处理 if (val === target[key]) { return true; } const ownKeys = Reflect.ownKeys(target); if (ownKeys.includes(key)) { console.log('已有的 key', key); } else { console.log('新增的 key', key); } const result = Reflect.set(target, key, val, receiver); console.log('set', key, val); // console.log('result', result) // true return result; // 是否设置成功 }, deleteProperty(target, key) { const result = Reflect.deleteProperty(target, key); console.log('delete property', key); // console.log('result', result) // true return result; // 是否删除成功 }, }; // 生成代理对象 const observed = new Proxy(target, proxyConf); return observed; } // 测试数据 const data = { name: 'zhangsan', age: 20, info: { city: 'beijing', a: { b: { c: { d: { e: 100, }, }, }, }, }, }; const proxyData = reactive(data);","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/vue/proxy-observe.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/vue/proxy-observe.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"proxy-observe 核心代码 自定义实现"}],["meta",{"property":"og:description","content":"proxy-observe 核心代码 自定义实现 // 创建响应式 function reactive(target = {}) { if (typeof target !== 'object' || target == null) { // 不是对象或数组，则返回 return target; } // 代理配置 const proxyConf = { get(target, key, receiver) { // 只处理本身（非原型的）属性 const ownKeys = Reflect.ownKeys(target); if (ownKeys.includes(key)) { console.log('get', key); // 监听 } const result = Reflect.get(target, key, receiver); // 深度监听 // 性能如何提升的？ return reactive(result); }, set(target, key, val, receiver) { // 重复的数据，不处理 if (val === target[key]) { return true; } const ownKeys = Reflect.ownKeys(target); if (ownKeys.includes(key)) { console.log('已有的 key', key); } else { console.log('新增的 key', key); } const result = Reflect.set(target, key, val, receiver); console.log('set', key, val); // console.log('result', result) // true return result; // 是否设置成功 }, deleteProperty(target, key) { const result = Reflect.deleteProperty(target, key); console.log('delete property', key); // console.log('result', result) // true return result; // 是否删除成功 }, }; // 生成代理对象 const observed = new Proxy(target, proxyConf); return observed; } // 测试数据 const data = { name: 'zhangsan', age: 20, info: { city: 'beijing', a: { b: { c: { d: { e: 100, }, }, }, }, }, }; const proxyData = reactive(data);"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"vue"}],["meta",{"property":"article:published_time","content":"2021-06-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"proxy-observe 核心代码 自定义实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-06-27T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":0.82,"words":246},"filePathRelative":"posts/vue/proxy-observe.md","localizedDate":"2021年6月27日","excerpt":"<h1> proxy-observe 核心代码 自定义实现</h1>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 创建响应式</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">reactive</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">target <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> target <span class=\\"token operator\\">!==</span> <span class=\\"token string\\">'object'</span> <span class=\\"token operator\\">||</span> target <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 不是对象或数组，则返回</span>\\n    <span class=\\"token keyword\\">return</span> target<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token comment\\">// 代理配置</span>\\n  <span class=\\"token keyword\\">const</span> proxyConf <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> receiver<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// 只处理本身（非原型的）属性</span>\\n      <span class=\\"token keyword\\">const</span> ownKeys <span class=\\"token operator\\">=</span> Reflect<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ownKeys</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>ownKeys<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">includes</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'get'</span><span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 监听</span>\\n      <span class=\\"token punctuation\\">}</span>\\n\\n      <span class=\\"token keyword\\">const</span> result <span class=\\"token operator\\">=</span> Reflect<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> receiver<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n      <span class=\\"token comment\\">// 深度监听</span>\\n      <span class=\\"token comment\\">// 性能如何提升的？</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">reactive</span><span class=\\"token punctuation\\">(</span>result<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> val<span class=\\"token punctuation\\">,</span> receiver<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// 重复的数据，不处理</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>val <span class=\\"token operator\\">===</span> target<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n\\n      <span class=\\"token keyword\\">const</span> ownKeys <span class=\\"token operator\\">=</span> Reflect<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ownKeys</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>ownKeys<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">includes</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'已有的 key'</span><span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n        console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'新增的 key'</span><span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n\\n      <span class=\\"token keyword\\">const</span> result <span class=\\"token operator\\">=</span> Reflect<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> val<span class=\\"token punctuation\\">,</span> receiver<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'set'</span><span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token comment\\">// console.log('result', result) // true</span>\\n      <span class=\\"token keyword\\">return</span> result<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 是否设置成功</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function\\">deleteProperty</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">target<span class=\\"token punctuation\\">,</span> key</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">const</span> result <span class=\\"token operator\\">=</span> Reflect<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">deleteProperty</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'delete property'</span><span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token comment\\">// console.log('result', result) // true</span>\\n      <span class=\\"token keyword\\">return</span> result<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 是否删除成功</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token comment\\">// 生成代理对象</span>\\n  <span class=\\"token keyword\\">const</span> observed <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Proxy</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> proxyConf<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> observed<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 测试数据</span>\\n<span class=\\"token keyword\\">const</span> data <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'zhangsan'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">20</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">info</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">city</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'beijing'</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">a</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token literal-property property\\">b</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token literal-property property\\">c</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token literal-property property\\">d</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token literal-property property\\">e</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">,</span>\\n          <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">const</span> proxyData <span class=\\"token operator\\">=</span> <span class=\\"token function\\">reactive</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
