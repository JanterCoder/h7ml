const e=JSON.parse('{"key":"v-a632a050","path":"/posts/module.html","title":"模块化","lang":"zh-CN","frontmatter":{"icon":"module","order":1,"date":"2022-03-20T00:00:00.000Z","author":"h7ml","category":"es6","tag":"es6","title":"模块化","star":true,"description":"什么是模块化？ 百度百科中的解释: 模块化是指解决一个复杂问题时自顶向下逐层把系统划分成若干模块的过程，有多种属性，分别反映其内部特性。 在编程中 模块化是将一个复杂的应用程序，按照一定的规则拆分成若干个文件(代码块)，并进行组合。文件内部的数据与实现都是私有的，只是对外暴露一些接口(方法、变量)与其他模块进行通信 模块化的好处 避免命名空间的冲突 提高代码的复用性 提高维护性 更好的分离，实现按需加载","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/module.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/module.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"模块化"}],["meta",{"property":"og:description","content":"什么是模块化？ 百度百科中的解释: 模块化是指解决一个复杂问题时自顶向下逐层把系统划分成若干模块的过程，有多种属性，分别反映其内部特性。 在编程中 模块化是将一个复杂的应用程序，按照一定的规则拆分成若干个文件(代码块)，并进行组合。文件内部的数据与实现都是私有的，只是对外暴露一些接口(方法、变量)与其他模块进行通信 模块化的好处 避免命名空间的冲突 提高代码的复用性 提高维护性 更好的分离，实现按需加载"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"es6"}],["meta",{"property":"article:published_time","content":"2022-03-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模块化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-20T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"CommonJS","slug":"commonjs","link":"#commonjs","children":[]},{"level":2,"title":"ESModule","slug":"esmodule","link":"#esmodule","children":[]},{"level":2,"title":"AMD","slug":"amd","link":"#amd","children":[{"level":3,"title":"相关 api 及使用","slug":"相关-api-及使用","link":"#相关-api-及使用","children":[]}]},{"level":2,"title":"CMD","slug":"cmd","link":"#cmd","children":[{"level":3,"title":"相关 api 及使用","slug":"相关-api-及使用-1","link":"#相关-api-及使用-1","children":[]}]},{"level":2,"title":"UMD","slug":"umd","link":"#umd","children":[]},{"level":2,"title":"相关文章","slug":"相关文章","link":"#相关文章","children":[]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":5.09,"words":1527},"filePathRelative":"posts/module.md","localizedDate":"2022年3月20日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">什么是模块化？</p>\\n<p>百度百科中的解释: 模块化是指解决一个复杂问题时自顶向下逐层把系统划分成若干模块的过程，有多种属性，分别反映其内部特性。</p>\\n<p>在编程中 模块化是将一个复杂的应用程序，按照一定的规则拆分成若干个文件(代码块)，并进行组合。文件内部的数据与实现都是私有的，只是对外暴露一些接口(方法、变量)与其他模块进行通信</p>\\n</div>\\n<p>模块化的好处</p>\\n<ul>\\n<li>避免命名空间的冲突</li>\\n<li>提高代码的复用性</li>\\n<li>提高维护性</li>\\n<li>更好的分离，实现按需加载</li>\\n</ul>","autoDesc":true}');export{e as data};
