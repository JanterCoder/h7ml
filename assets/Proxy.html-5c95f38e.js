const n=JSON.parse(`{"key":"v-0d61e1a9","path":"/posts/vue/Proxy.html","title":"Proxy 核心代码 自定义实现","lang":"zh-CN","frontmatter":{"icon":"vue","order":1,"date":"2021-06-27T00:00:00.000Z","author":"h7ml","category":"vue","tag":"vue","star":true,"description":"Proxy 核心代码 自定义实现 // const data = { // name: 'zhangsan', // age: 20, // } const data = ['a', 'b', 'c']; const proxyData = new Proxy(data, { get(target, key, receiver) { // 只处理本身（非原型的）属性 const ownKeys = Reflect.ownKeys(target); if (ownKeys.includes(key)) { console.log('get', key); // 监听 } const result = Reflect.get(target, key, receiver); return result; // 返回结果 }, set(target, key, val, receiver) { // 重复的数据，不处理 if (val === target[key]) { return true; } const result = Reflect.set(target, key, val, receiver); console.log('set', key, val); // console.log('result', result) // true return result; // 是否设置成功 }, deleteProperty(target, key) { const result = Reflect.deleteProperty(target, key); console.log('delete property', key); // console.log('result', result) // true return result; // 是否删除成功 }, });","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/vue/Proxy.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/vue/Proxy.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"Proxy 核心代码 自定义实现"}],["meta",{"property":"og:description","content":"Proxy 核心代码 自定义实现 // const data = { // name: 'zhangsan', // age: 20, // } const data = ['a', 'b', 'c']; const proxyData = new Proxy(data, { get(target, key, receiver) { // 只处理本身（非原型的）属性 const ownKeys = Reflect.ownKeys(target); if (ownKeys.includes(key)) { console.log('get', key); // 监听 } const result = Reflect.get(target, key, receiver); return result; // 返回结果 }, set(target, key, val, receiver) { // 重复的数据，不处理 if (val === target[key]) { return true; } const result = Reflect.set(target, key, val, receiver); console.log('set', key, val); // console.log('result', result) // true return result; // 是否设置成功 }, deleteProperty(target, key) { const result = Reflect.deleteProperty(target, key); console.log('delete property', key); // console.log('result', result) // true return result; // 是否删除成功 }, });"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"vue"}],["meta",{"property":"article:published_time","content":"2021-06-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Proxy 核心代码 自定义实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-06-27T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":0.54,"words":162},"filePathRelative":"posts/vue/Proxy.md","localizedDate":"2021年6月27日","excerpt":"<h1> Proxy 核心代码 自定义实现</h1>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// const data = {</span>\\n<span class=\\"token comment\\">//     name: 'zhangsan',</span>\\n<span class=\\"token comment\\">//     age: 20,</span>\\n<span class=\\"token comment\\">// }</span>\\n<span class=\\"token keyword\\">const</span> data <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'a'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'b'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'c'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">const</span> proxyData <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Proxy</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> receiver<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 只处理本身（非原型的）属性</span>\\n    <span class=\\"token keyword\\">const</span> ownKeys <span class=\\"token operator\\">=</span> Reflect<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ownKeys</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>ownKeys<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">includes</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'get'</span><span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 监听</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">const</span> result <span class=\\"token operator\\">=</span> Reflect<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> receiver<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> result<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 返回结果</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> val<span class=\\"token punctuation\\">,</span> receiver<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 重复的数据，不处理</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>val <span class=\\"token operator\\">===</span> target<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">const</span> result <span class=\\"token operator\\">=</span> Reflect<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> val<span class=\\"token punctuation\\">,</span> receiver<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'set'</span><span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// console.log('result', result) // true</span>\\n    <span class=\\"token keyword\\">return</span> result<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 是否设置成功</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token function\\">deleteProperty</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">target<span class=\\"token punctuation\\">,</span> key</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> result <span class=\\"token operator\\">=</span> Reflect<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">deleteProperty</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'delete property'</span><span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// console.log('result', result) // true</span>\\n    <span class=\\"token keyword\\">return</span> result<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 是否删除成功</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
