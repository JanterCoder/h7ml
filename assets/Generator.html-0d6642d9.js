const n=JSON.parse(`{"key":"v-0f313303","path":"/posts/ecmascript/Generator.html","title":"JavaScript ES6 Generator 函数","lang":"zh-CN","frontmatter":{"description":"JavaScript ES6 Generator 函数 执行机制 function 后加 *，函数执行后返回 Iterator 对象 返回的对象调用 next 方法开始执行，遇到 yield 关键字会停止。 再次调用 next 方法会从上一次的结束的地方继续执行，直到 yield yield 后面的值会在 next 执行停止时返回 next 传的参数会在函数内传给 yield function* fnc() { console.log('开始'); let a = yield '返回给next'; // next 没有传参 a 默认 undefined console.log(a, '结束'); // next传入 '结束' return '2'; } let f = fnc(); f.next('next传入'); // {value: \\"返回给 next\\", done: false} f.next(); // {value: undefined, done: true}","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/ecmascript/Generator.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/ecmascript/Generator.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"JavaScript ES6 Generator 函数"}],["meta",{"property":"og:description","content":"JavaScript ES6 Generator 函数 执行机制 function 后加 *，函数执行后返回 Iterator 对象 返回的对象调用 next 方法开始执行，遇到 yield 关键字会停止。 再次调用 next 方法会从上一次的结束的地方继续执行，直到 yield yield 后面的值会在 next 执行停止时返回 next 传的参数会在函数内传给 yield function* fnc() { console.log('开始'); let a = yield '返回给next'; // next 没有传参 a 默认 undefined console.log(a, '结束'); // next传入 '结束' return '2'; } let f = fnc(); f.next('next传入'); // {value: \\"返回给 next\\", done: false} f.next(); // {value: undefined, done: true}"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript ES6 Generator 函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\",\\"url\\":\\"https://www.h7ml.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":0.53,"words":159},"filePathRelative":"posts/ecmascript/Generator.md","localizedDate":"2023年5月3日","excerpt":"<h1> JavaScript ES6 Generator 函数</h1>\\n<ul>\\n<li>执行机制</li>\\n</ul>\\n<ol>\\n<li>function 后加 *，函数执行后返回 Iterator 对象</li>\\n<li>返回的对象调用 next 方法开始执行，遇到 yield 关键字会停止。</li>\\n<li>再次调用 next 方法会从上一次的结束的地方继续执行，直到 yield</li>\\n<li>yield 后面的值会在 next 执行停止时返回</li>\\n<li>next 传的参数会在函数内传给 yield</li>\\n</ol>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span><span class=\\"token operator\\">*</span> <span class=\\"token function\\">fnc</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'开始'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> a <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">yield</span> <span class=\\"token string\\">'返回给next'</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// next 没有传参 a 默认 undefined</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'结束'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// next传入 '结束'</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token string\\">'2'</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">let</span> f <span class=\\"token operator\\">=</span> <span class=\\"token function\\">fnc</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nf<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">next</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'next传入'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// {value: \\"返回给 next\\", done: false}</span>\\nf<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">next</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// {value: undefined, done: true}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
