const e=JSON.parse('{"key":"v-1ff21c54","path":"/posts/vue/diff.html","title":"diff","lang":"zh-CN","frontmatter":{"icon":"vue","order":3,"date":"2021-07-12T00:00:00.000Z","author":"h7ml","title":"diff","category":"vue","tag":["vue","diff"],"star":true,"lastUpdated":false,"description":"Diff 算法 Diff算法的核心就是针对具有相同父节点的同层新旧子节点进行比较，而不是使用逐层搜索递归遍历的方式。时间复杂度为O(n)。 如何理解？ 说白点，就是当新旧VNode树在同一层具有相同的VNode节点时，才会继续对其子节点进行比较。一旦旧VNode树同层中的节点在新VNode树中不存在或者是多余的，都会在新的真实DOM中进行添加或者删除。","head":[["link",{"rel":"canonical","href":"https://www.h7ml.cn/posts/vue/diff.html"}],["meta",{"property":"og:url","content":"https://www.h7ml.cn/posts/vue/diff.html"}],["meta",{"property":"og:site_name","content":"h7ml-前端物语"}],["meta",{"property":"og:title","content":"diff"}],["meta",{"property":"og:description","content":"Diff 算法 Diff算法的核心就是针对具有相同父节点的同层新旧子节点进行比较，而不是使用逐层搜索递归遍历的方式。时间复杂度为O(n)。 如何理解？ 说白点，就是当新旧VNode树在同一层具有相同的VNode节点时，才会继续对其子节点进行比较。一旦旧VNode树同层中的节点在新VNode树中不存在或者是多余的，都会在新的真实DOM中进行添加或者删除。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-03T04:52:44.000Z"}],["meta",{"property":"article:author","content":"h7ml"}],["meta",{"property":"article:tag","content":"vue"}],["meta",{"property":"article:tag","content":"diff"}],["meta",{"property":"article:published_time","content":"2021-07-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-03T04:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"diff\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-07-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-03T04:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"h7ml\\"}]}"]]},"headers":[{"level":2,"title":"Diff 算法","slug":"diff-算法","link":"#diff-算法","children":[{"level":3,"title":"diff 流程图","slug":"diff-流程图","link":"#diff-流程图","children":[]},{"level":3,"title":"从源码角度进行探究","slug":"从源码角度进行探究","link":"#从源码角度进行探究","children":[]},{"level":3,"title":"sameVnode","slug":"samevnode","link":"#samevnode","children":[]},{"level":3,"title":"patchVnode","slug":"patchvnode","link":"#patchvnode","children":[]},{"level":3,"title":"updateChildren","slug":"updatechildren","link":"#updatechildren","children":[]},{"level":3,"title":"具体的 diff 分析","slug":"具体的-diff-分析","link":"#具体的-diff-分析","children":[]},{"level":3,"title":"参考","slug":"参考","link":"#参考","children":[]}]}],"git":{"createdTime":1683089564000,"updatedTime":1683089564000,"contributors":[{"name":"h7ml","email":"h7ml@qq.com","commits":1}]},"readingTime":{"minutes":12.64,"words":3793},"filePathRelative":"posts/vue/diff.md","localizedDate":"2021年7月12日","excerpt":"<h2> Diff 算法</h2>\\n<p><code>Diff</code>算法的核心就是<strong>针对具有相同父节点的同层新旧子节点进行比较，而不是使用逐层搜索递归遍历的方式。时间复杂度为<code>O(n)</code></strong>。</p>\\n<p>如何理解？</p>\\n<p>说白点，就是<strong>当新旧<code>VNode</code>树在同一层具有相同的<code>VNode</code>节点时，才会继续对其子节点进行比较</strong>。一旦旧<code>VNode</code>树同层中的节点在新<code>VNode</code>树中不存在或者是多余的，都会在新的真实<code>DOM</code>中进行添加或者删除。</p>","autoDesc":true}');export{e as data};
